INFO  16:47:11,870 - Compiling source file: C:\Users\el190235d\Desktop\PP1\projekat\pp1lab.templateAST\pp1lab.templateAST\workspace\MJCompiler\test\sem_test.mj
INFO  16:47:11,918 - #2 program
INFO  16:47:11,918 - #47 test301
INFO  16:47:11,918 - #8 const
INFO  16:47:11,919 - #47 int
INFO  16:47:11,920 - #47 nula
INFO  16:47:11,921 - #32 =
INFO  16:47:11,921 - #46 0
INFO  16:47:11,921 - #35 ;
INFO  16:47:11,922 - #8 const
INFO  16:47:11,923 - #47 int
INFO  16:47:11,923 - #47 jedan
INFO  16:47:11,923 - #32 =
INFO  16:47:11,923 - #46 1
INFO  16:47:11,923 - #35 ;
INFO  16:47:11,923 - #8 const
INFO  16:47:11,923 - #47 int
INFO  16:47:11,923 - #47 pet
INFO  16:47:11,923 - #32 =
INFO  16:47:11,923 - #46 5
INFO  16:47:11,923 - #35 ;
INFO  16:47:11,924 - #47 int
INFO  16:47:11,924 - #47 niz
INFO  16:47:11,924 - #41 [
INFO  16:47:11,924 - #42 ]
INFO  16:47:11,924 - #37 ,
INFO  16:47:11,925 - #47 niz2
INFO  16:47:11,925 - #41 [
INFO  16:47:11,925 - #42 ]
INFO  16:47:11,925 - #37 ,
INFO  16:47:11,925 - #47 a
INFO  16:47:11,926 - #37 ,
INFO  16:47:11,926 - #47 b
INFO  16:47:11,926 - #35 ;
INFO  16:47:11,926 - #47 char
INFO  16:47:11,927 - #47 nizch
INFO  16:47:11,927 - #41 [
INFO  16:47:11,927 - #42 ]
INFO  16:47:11,927 - #35 ;
INFO  16:47:11,927 - #43 {
INFO  16:47:11,927 - #47 bool
INFO  16:47:11,927 - #47 p
INFO  16:47:11,928 - #39 (
INFO  16:47:11,928 - #40 )
INFO  16:47:11,928 - #43 {
INFO  16:47:11,930 - #4 return
INFO  16:47:11,932 - #49 true
INFO  16:47:11,932 - #35 ;
INFO  16:47:11,934 - #44 }
INFO  16:47:11,935 - #14 void
INFO  16:47:11,935 - #47 main
INFO  16:47:11,936 - #39 (
INFO  16:47:11,936 - #40 )
INFO  16:47:11,936 - #47 int
INFO  16:47:11,936 - #47 i
INFO  16:47:11,936 - #35 ;
INFO  16:47:11,936 - #47 int
INFO  16:47:11,936 - #47 curr
INFO  16:47:11,936 - #35 ;
INFO  16:47:11,936 - #47 bool
INFO  16:47:11,936 - #47 k
INFO  16:47:11,936 - #35 ;
INFO  16:47:11,936 - #43 {
INFO  16:47:11,937 - #47 len
INFO  16:47:11,937 - #39 (
INFO  16:47:11,937 - #47 niz
INFO  16:47:11,937 - #40 )
INFO  16:47:11,938 - #35 ;
INFO  16:47:11,938 - #47 niz
INFO  16:47:11,938 - #38 .
INFO  16:47:11,938 - #17 foreach
INFO  16:47:11,938 - #39 (
INFO  16:47:11,938 - #47 curr
INFO  16:47:11,939 - #45 =>
INFO  16:47:11,939 - #43 {
INFO  16:47:11,939 - #18 break
INFO  16:47:11,939 - #35 ;
INFO  16:47:11,939 - #11 while
INFO  16:47:11,939 - #39 (
INFO  16:47:11,939 - #47 i
INFO  16:47:11,940 - #28 <
INFO  16:47:11,940 - #46 5
INFO  16:47:11,941 - #40 )
INFO  16:47:11,941 - #43 {
INFO  16:47:11,941 - #18 break
INFO  16:47:11,941 - #35 ;
INFO  16:47:11,941 - #44 }
INFO  16:47:11,942 - #44 }
INFO  16:47:11,942 - #40 )
INFO  16:47:11,942 - #35 ;
INFO  16:47:11,942 - #9 if
INFO  16:47:11,942 - #39 (
INFO  16:47:11,942 - #47 i
INFO  16:47:11,942 - #24 ==
INFO  16:47:11,942 - #46 1
INFO  16:47:11,943 - #40 )
INFO  16:47:11,943 - #43 {
INFO  16:47:11,943 - #16 continue
INFO  16:47:11,943 - #35 ;
INFO  16:47:11,943 - #44 }
INFO  16:47:11,944 - #18 break
INFO  16:47:11,944 - #35 ;
INFO  16:47:11,944 - #44 }
INFO  16:47:11,944 - #44 }
INFO  16:47:11,951 - Program(
  ProgName(
   test301
  ) [ProgName]
  VarDeclarations(
    VarDeclarations(
      ConstDeclarations(
        ConstDeclarations(
          ConstDeclarations(
            NoVarDecl(
            ) [NoVarDecl]
            ConstDeclaration(
              Type(
               int
              ) [Type]
              ConstantValueNumber(
               nula
               0
              ) [ConstantValueNumber]
              EndOfListOfCharDeclarations(
              ) [EndOfListOfCharDeclarations]
            ) [ConstDeclaration]
          ) [ConstDeclarations]
          ConstDeclaration(
            Type(
             int
            ) [Type]
            ConstantValueNumber(
             jedan
             1
            ) [ConstantValueNumber]
            EndOfListOfCharDeclarations(
            ) [EndOfListOfCharDeclarations]
          ) [ConstDeclaration]
        ) [ConstDeclarations]
        ConstDeclaration(
          Type(
           int
          ) [Type]
          ConstantValueNumber(
           pet
           5
          ) [ConstantValueNumber]
          EndOfListOfCharDeclarations(
          ) [EndOfListOfCharDeclarations]
        ) [ConstDeclaration]
      ) [ConstDeclarations]
      VarDeclaration(
        Type(
         int
        ) [Type]
        VarDeclarationNotLast(
          NotLastVarDeclarations(
           niz
            VarDeclarationOfArray(
            ) [VarDeclarationOfArray]
          ) [NotLastVarDeclarations]
          VarDeclarationNotLast(
            NotLastVarDeclarations(
             niz2
              VarDeclarationOfArray(
              ) [VarDeclarationOfArray]
            ) [NotLastVarDeclarations]
            VarDeclarationNotLast(
              NotLastVarDeclarations(
               a
                VarDeclarationOfNotArray(
                ) [VarDeclarationOfNotArray]
              ) [NotLastVarDeclarations]
              VarDeclarationLast(
                LastVarDeclarations(
                 b
                  VarDeclarationOfNotArray(
                  ) [VarDeclarationOfNotArray]
                ) [LastVarDeclarations]
              ) [VarDeclarationLast]
            ) [VarDeclarationNotLast]
          ) [VarDeclarationNotLast]
        ) [VarDeclarationNotLast]
      ) [VarDeclaration]
    ) [VarDeclarations]
    VarDeclaration(
      Type(
       char
      ) [Type]
      VarDeclarationLast(
        LastVarDeclarations(
         nizch
          VarDeclarationOfArray(
          ) [VarDeclarationOfArray]
        ) [LastVarDeclarations]
      ) [VarDeclarationLast]
    ) [VarDeclaration]
  ) [VarDeclarations]
  MethodDeclarations(
    MethodDeclarations(
      NoMethodDeclarations(
      ) [NoMethodDeclarations]
      MethodDeclaration(
        ReturnMethodTypeName(
          Type(
           bool
          ) [Type]
         p
        ) [ReturnMethodTypeName]
        NoFormalParameters(
        ) [NoFormalParameters]
        MethodWithoutVariables(
        ) [MethodWithoutVariables]
        Statements(
          NoStatements(
          ) [NoStatements]
          StatementReturnExpr(
            TermPositiveExpr(
              Term(
                SingleFactor(
                  BooleanConstFactor(
                   true
                  ) [BooleanConstFactor]
                ) [SingleFactor]
              ) [Term]
            ) [TermPositiveExpr]
          ) [StatementReturnExpr]
        ) [Statements]
      ) [MethodDeclaration]
    ) [MethodDeclarations]
    MethodDeclaration(
      VoidMethodTypeName(
       main
      ) [VoidMethodTypeName]
      NoFormalParameters(
      ) [NoFormalParameters]
      MethodVariables(
        MethodVariables(
          MethodVariables(
            MethodWithoutVariables(
            ) [MethodWithoutVariables]
            VarDeclaration(
              Type(
               int
              ) [Type]
              VarDeclarationLast(
                LastVarDeclarations(
                 i
                  VarDeclarationOfNotArray(
                  ) [VarDeclarationOfNotArray]
                ) [LastVarDeclarations]
              ) [VarDeclarationLast]
            ) [VarDeclaration]
          ) [MethodVariables]
          VarDeclaration(
            Type(
             int
            ) [Type]
            VarDeclarationLast(
              LastVarDeclarations(
               curr
                VarDeclarationOfNotArray(
                ) [VarDeclarationOfNotArray]
              ) [LastVarDeclarations]
            ) [VarDeclarationLast]
          ) [VarDeclaration]
        ) [MethodVariables]
        VarDeclaration(
          Type(
           bool
          ) [Type]
          VarDeclarationLast(
            LastVarDeclarations(
             k
              VarDeclarationOfNotArray(
              ) [VarDeclarationOfNotArray]
            ) [LastVarDeclarations]
          ) [VarDeclarationLast]
        ) [VarDeclaration]
      ) [MethodVariables]
      Statements(
        Statements(
          Statements(
            Statements(
              NoStatements(
              ) [NoStatements]
              StatementDesignator(
                DesignatorFuncCall(
                  FunctionCallName(
                    SimpleDesignator(
                     len
                    ) [SimpleDesignator]
                  ) [FunctionCallName]
                  Actuals(
                    ActualParam(
                      TermPositiveExpr(
                        Term(
                          SingleFactor(
                            DesignatorFactor(
                              SimpleDesignator(
                               niz
                              ) [SimpleDesignator]
                            ) [DesignatorFactor]
                          ) [SingleFactor]
                        ) [Term]
                      ) [TermPositiveExpr]
                    ) [ActualParam]
                  ) [Actuals]
                ) [DesignatorFuncCall]
              ) [StatementDesignator]
            ) [Statements]
            StatementForeach(
              SimpleDesignator(
               niz
              ) [SimpleDesignator]
              ForEachLoopParen(
              ) [ForEachLoopParen]
             curr
              StatementBlock(
                Statements(
                  Statements(
                    NoStatements(
                    ) [NoStatements]
                    StatementBreak(
                    ) [StatementBreak]
                  ) [Statements]
                  StatementWhile(
                    WhileLoopParen(
                    ) [WhileLoopParen]
                    ConditionsWithoutOr(
                      ConditionsWithoutAnd(
                        RelopCondition(
                          TermPositiveExpr(
                            Term(
                              SingleFactor(
                                DesignatorFactor(
                                  SimpleDesignator(
                                   i
                                  ) [SimpleDesignator]
                                ) [DesignatorFactor]
                              ) [SingleFactor]
                            ) [Term]
                          ) [TermPositiveExpr]
                          LessOperator(
                          ) [LessOperator]
                          TermPositiveExpr(
                            Term(
                              SingleFactor(
                                NumberConstFactor(
                                 5
                                ) [NumberConstFactor]
                              ) [SingleFactor]
                            ) [Term]
                          ) [TermPositiveExpr]
                        ) [RelopCondition]
                      ) [ConditionsWithoutAnd]
                    ) [ConditionsWithoutOr]
                    StatementBlock(
                      Statements(
                        NoStatements(
                        ) [NoStatements]
                        StatementBreak(
                        ) [StatementBreak]
                      ) [Statements]
                    ) [StatementBlock]
                  ) [StatementWhile]
                ) [Statements]
              ) [StatementBlock]
            ) [StatementForeach]
          ) [Statements]
          StatementIf(
            IfCondition(
              ConditionsWithoutOr(
                ConditionsWithoutAnd(
                  RelopCondition(
                    TermPositiveExpr(
                      Term(
                        SingleFactor(
                          DesignatorFactor(
                            SimpleDesignator(
                             i
                            ) [SimpleDesignator]
                          ) [DesignatorFactor]
                        ) [SingleFactor]
                      ) [Term]
                    ) [TermPositiveExpr]
                    EqualOperator(
                    ) [EqualOperator]
                    TermPositiveExpr(
                      Term(
                        SingleFactor(
                          NumberConstFactor(
                           1
                          ) [NumberConstFactor]
                        ) [SingleFactor]
                      ) [Term]
                    ) [TermPositiveExpr]
                  ) [RelopCondition]
                ) [ConditionsWithoutAnd]
              ) [ConditionsWithoutOr]
            ) [IfCondition]
            StatementBlock(
              Statements(
                NoStatements(
                ) [NoStatements]
                StatementContinue(
                ) [StatementContinue]
              ) [Statements]
            ) [StatementBlock]
          ) [StatementIf]
        ) [Statements]
        StatementBreak(
        ) [StatementBreak]
      ) [Statements]
    ) [MethodDeclaration]
  ) [MethodDeclarations]
) [Program]
INFO  16:47:11,951 - ====================================
INFO  16:47:11,956 - Kreirana je promenjiva niz[] na liniji 7
INFO  16:47:11,956 - Kreirana je promenjiva niz2[] na liniji 7
INFO  16:47:11,956 - Kreirana je promenjiva a na liniji 7
INFO  16:47:11,956 - Kreirana je promenjiva b na liniji 7
INFO  16:47:11,956 - Kreirana je promenjiva nizch[] na liniji 8
INFO  16:47:11,956 - Definicija funkcije p na liniji 11
INFO  16:47:11,956 - Definicija funkcije main na liniji 16
INFO  16:47:11,956 - Kreirana je promenjiva i na liniji 17
INFO  16:47:11,956 - Kreirana je promenjiva curr na liniji 18
INFO  16:47:11,956 - Kreirana je promenjiva k na liniji 19
ERROR 16:47:11,956 - SEMANTICKA GRESKA: Naredba continue mora biti u while ili foreach izrazu
ERROR 16:47:11,956 - SEMANTICKA GRESKA: Naredba break mora biti u while ili foreach izrazu
INFO  16:47:11,957 - Print count calls = 0
INFO  16:47:11,957 - ====================================
