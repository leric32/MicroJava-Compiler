INFO  19:51:49,771 - Compiling source file: C:\Users\el190235d\Desktop\PP1\projekat\pp1lab.templateAST\pp1lab.templateAST\workspace\MJCompiler\test\sem_errors.mj
INFO  19:51:49,836 - #2 program
INFO  19:51:49,836 - #47 ord
INFO  19:51:49,836 - #47 int
INFO  19:51:49,838 - #47 a
INFO  19:51:49,839 - #35 ;
INFO  19:51:49,841 - #8 const
INFO  19:51:49,842 - #47 int
INFO  19:51:49,842 - #47 b
INFO  19:51:49,842 - #32 =
INFO  19:51:49,843 - #46 10
INFO  19:51:49,843 - #35 ;
INFO  19:51:49,844 - #8 const
INFO  19:51:49,844 - #47 char
INFO  19:51:49,845 - #47 b
INFO  19:51:49,845 - #32 =
INFO  19:51:49,845 - #48 1
INFO  19:51:49,845 - #37 ,
INFO  19:51:49,845 - #47 c
INFO  19:51:49,845 - #32 =
INFO  19:51:49,846 - #48 c
INFO  19:51:49,847 - #35 ;
INFO  19:51:49,848 - #47 int
INFO  19:51:49,848 - #47 d
INFO  19:51:49,848 - #37 ,
INFO  19:51:49,848 - #47 e
INFO  19:51:49,848 - #41 [
INFO  19:51:49,848 - #42 ]
INFO  19:51:49,848 - #35 ;
INFO  19:51:49,849 - #8 const
INFO  19:51:49,850 - #47 bool
INFO  19:51:49,850 - #47 g
INFO  19:51:49,850 - #32 =
INFO  19:51:49,850 - #49 true
INFO  19:51:49,850 - #37 ,
INFO  19:51:49,850 - #47 h
INFO  19:51:49,850 - #32 =
INFO  19:51:49,850 - #49 false
INFO  19:51:49,850 - #35 ;
INFO  19:51:49,850 - #8 const
INFO  19:51:49,851 - #47 char
INFO  19:51:49,851 - #47 i
INFO  19:51:49,851 - #32 =
INFO  19:51:49,851 - #48 c
INFO  19:51:49,851 - #35 ;
INFO  19:51:49,851 - #5 class
INFO  19:51:49,851 - #47 Lol
INFO  19:51:49,851 - #43 {
INFO  19:51:49,851 - #43 {
INFO  19:51:49,853 - #47 char
INFO  19:51:49,853 - #47 ord
INFO  19:51:49,853 - #39 (
INFO  19:51:49,853 - #47 char
INFO  19:51:49,853 - #47 chr
INFO  19:51:49,853 - #40 )
INFO  19:51:49,853 - #43 {
INFO  19:51:49,854 - #4 return
INFO  19:51:49,855 - #48 1
INFO  19:51:49,856 - #35 ;
INFO  19:51:49,857 - #44 }
INFO  19:51:49,857 - #44 }
INFO  19:51:49,858 - #44 }
INFO  19:51:49,858 - #5 class
INFO  19:51:49,858 - #47 Lol2
INFO  19:51:49,858 - #15 extends
INFO  19:51:49,858 - #47 Lol
INFO  19:51:49,859 - #43 {
INFO  19:51:49,859 - #47 int
INFO  19:51:49,859 - #47 a
INFO  19:51:49,859 - #37 ,
INFO  19:51:49,859 - #47 b
INFO  19:51:49,860 - #35 ;
INFO  19:51:49,860 - #44 }
INFO  19:51:49,860 - #5 class
INFO  19:51:49,860 - #47 Lol4
INFO  19:51:49,860 - #15 extends
INFO  19:51:49,860 - #47 Lol3
INFO  19:51:49,861 - #43 {
INFO  19:51:49,861 - #47 int
INFO  19:51:49,861 - #47 c
INFO  19:51:49,861 - #35 ;
INFO  19:51:49,861 - #43 {
INFO  19:51:49,861 - #14 void
INFO  19:51:49,861 - #47 bb
INFO  19:51:49,861 - #39 (
INFO  19:51:49,862 - #47 int
INFO  19:51:49,862 - #47 c
INFO  19:51:49,862 - #40 )
INFO  19:51:49,862 - #43 {
INFO  19:51:49,862 - #4 return
INFO  19:51:49,862 - #46 1
INFO  19:51:49,862 - #35 ;
INFO  19:51:49,863 - #44 }
INFO  19:51:49,863 - #44 }
INFO  19:51:49,863 - #44 }
INFO  19:51:49,863 - #5 class
INFO  19:51:49,863 - #47 Lol3
INFO  19:51:49,863 - #15 extends
INFO  19:51:49,864 - #47 Lol2
INFO  19:51:49,864 - #43 {
INFO  19:51:49,864 - #47 int
INFO  19:51:49,864 - #47 a
INFO  19:51:49,864 - #35 ;
INFO  19:51:49,864 - #47 int
INFO  19:51:49,864 - #47 c
INFO  19:51:49,864 - #37 ,
INFO  19:51:49,864 - #47 d
INFO  19:51:49,864 - #35 ;
INFO  19:51:49,864 - #43 {
INFO  19:51:49,865 - #14 void
INFO  19:51:49,865 - #47 a
INFO  19:51:49,865 - #39 (
INFO  19:51:49,865 - #47 Lol
INFO  19:51:49,865 - #47 x
INFO  19:51:49,865 - #37 ,
INFO  19:51:49,865 - #47 int
INFO  19:51:49,865 - #47 x
INFO  19:51:49,865 - #40 )
INFO  19:51:49,866 - #47 Lol2
INFO  19:51:49,866 - #47 x
INFO  19:51:49,866 - #35 ;
INFO  19:51:49,866 - #43 {
INFO  19:51:49,866 - #3 print
INFO  19:51:49,868 - #39 (
INFO  19:51:49,868 - #47 x
INFO  19:51:49,869 - #40 )
INFO  19:51:49,869 - #35 ;
INFO  19:51:49,869 - #44 }
INFO  19:51:49,869 - #14 void
INFO  19:51:49,869 - #47 f
INFO  19:51:49,870 - #39 (
INFO  19:51:49,870 - #40 )
INFO  19:51:49,870 - #47 Lol
INFO  19:51:49,870 - #47 c
INFO  19:51:49,871 - #41 [
INFO  19:51:49,871 - #42 ]
INFO  19:51:49,871 - #35 ;
INFO  19:51:49,871 - #47 char
INFO  19:51:49,871 - #47 c2
INFO  19:51:49,871 - #35 ;
INFO  19:51:49,871 - #43 {
INFO  19:51:49,871 - #47 this
INFO  19:51:49,871 - #38 .
INFO  19:51:49,871 - #47 a
INFO  19:51:49,872 - #39 (
INFO  19:51:49,872 - #40 )
INFO  19:51:49,873 - #35 ;
INFO  19:51:49,873 - #47 a
INFO  19:51:49,873 - #32 =
INFO  19:51:49,873 - #46 1
INFO  19:51:49,873 - #35 ;
INFO  19:51:49,873 - #47 ord
INFO  19:51:49,874 - #39 (
INFO  19:51:49,874 - #47 a
INFO  19:51:49,874 - #40 )
INFO  19:51:49,874 - #35 ;
INFO  19:51:49,874 - #47 c2
INFO  19:51:49,874 - #32 =
INFO  19:51:49,874 - #47 ord
INFO  19:51:49,874 - #39 (
INFO  19:51:49,875 - #47 c2
INFO  19:51:49,875 - #40 )
INFO  19:51:49,875 - #35 ;
INFO  19:51:49,875 - #47 a
INFO  19:51:49,875 - #33 ++
INFO  19:51:49,875 - #35 ;
INFO  19:51:49,875 - #47 a
INFO  19:51:49,876 - #34 --
INFO  19:51:49,876 - #35 ;
INFO  19:51:49,876 - #41 [
INFO  19:51:49,876 - #37 ,
INFO  19:51:49,877 - #47 a
INFO  19:51:49,877 - #37 ,
INFO  19:51:49,877 - #47 b
INFO  19:51:49,877 - #37 ,
INFO  19:51:49,877 - #42 ]
INFO  19:51:49,878 - #32 =
INFO  19:51:49,878 - #47 e
INFO  19:51:49,878 - #35 ;
INFO  19:51:49,878 - #47 a
INFO  19:51:49,878 - #32 =
INFO  19:51:49,878 - #47 b
INFO  19:51:49,878 - #21 *
INFO  19:51:49,878 - #47 c
INFO  19:51:49,880 - #19 +
INFO  19:51:49,880 - #39 (
INFO  19:51:49,882 - #20 -
INFO  19:51:49,882 - #46 1
INFO  19:51:49,882 - #40 )
INFO  19:51:49,882 - #20 -
INFO  19:51:49,882 - #46 2
INFO  19:51:49,883 - #22 /
INFO  19:51:49,883 - #46 4
INFO  19:51:49,884 - #23 %
INFO  19:51:49,884 - #47 d
INFO  19:51:49,885 - #35 ;
INFO  19:51:49,885 - #47 b
INFO  19:51:49,885 - #32 =
INFO  19:51:49,885 - #12 new
INFO  19:51:49,885 - #47 Lol
INFO  19:51:49,885 - #39 (
INFO  19:51:49,885 - #46 1
INFO  19:51:49,885 - #37 ,
INFO  19:51:49,886 - #47 f
INFO  19:51:49,886 - #39 (
INFO  19:51:49,886 - #40 )
INFO  19:51:49,886 - #37 ,
INFO  19:51:49,886 - #46 2
INFO  19:51:49,886 - #40 )
INFO  19:51:49,886 - #35 ;
INFO  19:51:49,887 - #47 c
INFO  19:51:49,887 - #32 =
INFO  19:51:49,887 - #12 new
INFO  19:51:49,887 - #47 Lol2
INFO  19:51:49,887 - #41 [
INFO  19:51:49,887 - #47 a
INFO  19:51:49,887 - #42 ]
INFO  19:51:49,887 - #35 ;
INFO  19:51:49,888 - #47 c
INFO  19:51:49,888 - #32 =
INFO  19:51:49,888 - #12 new
INFO  19:51:49,888 - #47 Lol2
INFO  19:51:49,888 - #41 [
INFO  19:51:49,888 - #47 c2
INFO  19:51:49,888 - #42 ]
INFO  19:51:49,888 - #35 ;
INFO  19:51:49,888 - #47 a
INFO  19:51:49,888 - #32 =
INFO  19:51:49,889 - #12 new
INFO  19:51:49,889 - #47 int
INFO  19:51:49,889 - #39 (
INFO  19:51:49,889 - #40 )
INFO  19:51:49,889 - #35 ;
INFO  19:51:49,889 - #9 if
INFO  19:51:49,889 - #39 (
INFO  19:51:49,891 - #47 a
INFO  19:51:49,891 - #40 )
INFO  19:51:49,892 - #43 {
INFO  19:51:49,893 - #9 if
INFO  19:51:49,893 - #39 (
INFO  19:51:49,893 - #47 g
INFO  19:51:49,893 - #31 ||
INFO  19:51:49,894 - #47 a
INFO  19:51:49,894 - #30 &&
INFO  19:51:49,894 - #47 c
INFO  19:51:49,895 - #41 [
INFO  19:51:49,896 - #46 0
INFO  19:51:49,896 - #42 ]
INFO  19:51:49,896 - #28 <
INFO  19:51:49,896 - #47 c
INFO  19:51:49,897 - #41 [
INFO  19:51:49,898 - #46 1
INFO  19:51:49,898 - #42 ]
INFO  19:51:49,898 - #40 )
INFO  19:51:49,898 - #43 {
INFO  19:51:49,898 - #44 }
INFO  19:51:49,900 - #18 break
INFO  19:51:49,902 - #35 ;
INFO  19:51:49,903 - #44 }
INFO  19:51:49,903 - #44 }
INFO  19:51:49,904 - #44 }
INFO  19:51:49,904 - #44 }
INFO  19:51:49,904 - #43 {
INFO  19:51:49,904 - #14 void
INFO  19:51:49,905 - #47 lol
INFO  19:51:49,905 - #39 (
INFO  19:51:49,905 - #40 )
INFO  19:51:49,905 - #43 {
INFO  19:51:49,905 - #44 }
INFO  19:51:49,905 - #47 Lol
INFO  19:51:49,906 - #47 lol2
INFO  19:51:49,906 - #39 (
INFO  19:51:49,906 - #47 int
INFO  19:51:49,906 - #47 a
INFO  19:51:49,906 - #40 )
INFO  19:51:49,906 - #47 int
INFO  19:51:49,906 - #47 b
INFO  19:51:49,906 - #37 ,
INFO  19:51:49,906 - #47 c
INFO  19:51:49,906 - #41 [
INFO  19:51:49,906 - #42 ]
INFO  19:51:49,906 - #35 ;
INFO  19:51:49,906 - #43 {
INFO  19:51:49,907 - #44 }
INFO  19:51:49,907 - #44 }
INFO  19:51:49,917 - Program(
  ProgName(
   ord
  ) [ProgName]
  ClassDeclarations(
    ClassDeclarations(
      ClassDeclarations(
        ClassDeclarations(
          ConstDeclarations(
            ConstDeclarations(
              VarDeclarations(
                ConstDeclarations(
                  ConstDeclarations(
                    VarDeclarations(
                      NoVarDecl(
                      ) [NoVarDecl]
                      VarDeclaration(
                        Type(
                         int
                        ) [Type]
                        VarDeclarationLast(
                          LastVarDeclarations(
                           a
                            VarDeclarationOfNotArray(
                            ) [VarDeclarationOfNotArray]
                          ) [LastVarDeclarations]
                        ) [VarDeclarationLast]
                      ) [VarDeclaration]
                    ) [VarDeclarations]
                    ConstDeclaration(
                      Type(
                       int
                      ) [Type]
                      ConstantValueNumber(
                       b
                       10
                      ) [ConstantValueNumber]
                      EndOfListOfCharDeclarations(
                      ) [EndOfListOfCharDeclarations]
                    ) [ConstDeclaration]
                  ) [ConstDeclarations]
                  ConstDeclaration(
                    Type(
                     char
                    ) [Type]
                    ConstantValueChar(
                     b
                     1
                    ) [ConstantValueChar]
                    ListOfCharDeclarations(
                      EndOfListOfCharDeclarations(
                      ) [EndOfListOfCharDeclarations]
                      ConstantValueChar(
                       c
                       c
                      ) [ConstantValueChar]
                    ) [ListOfCharDeclarations]
                  ) [ConstDeclaration]
                ) [ConstDeclarations]
                VarDeclaration(
                  Type(
                   int
                  ) [Type]
                  VarDeclarationNotLast(
                    NotLastVarDeclarations(
                     d
                      VarDeclarationOfNotArray(
                      ) [VarDeclarationOfNotArray]
                    ) [NotLastVarDeclarations]
                    VarDeclarationLast(
                      LastVarDeclarations(
                       e
                        VarDeclarationOfArray(
                        ) [VarDeclarationOfArray]
                      ) [LastVarDeclarations]
                    ) [VarDeclarationLast]
                  ) [VarDeclarationNotLast]
                ) [VarDeclaration]
              ) [VarDeclarations]
              ConstDeclaration(
                Type(
                 bool
                ) [Type]
                ConstantValueBoolean(
                 g
                 true
                ) [ConstantValueBoolean]
                ListOfCharDeclarations(
                  EndOfListOfCharDeclarations(
                  ) [EndOfListOfCharDeclarations]
                  ConstantValueBoolean(
                   h
                   false
                  ) [ConstantValueBoolean]
                ) [ListOfCharDeclarations]
              ) [ConstDeclaration]
            ) [ConstDeclarations]
            ConstDeclaration(
              Type(
               char
              ) [Type]
              ConstantValueChar(
               i
               c
              ) [ConstantValueChar]
              EndOfListOfCharDeclarations(
              ) [EndOfListOfCharDeclarations]
            ) [ConstDeclaration]
          ) [ConstDeclarations]
          ClassDeclaration(
            NameOfClass(
             Lol
            ) [NameOfClass]
            ClassIsNotExtended(
            ) [ClassIsNotExtended]
            ClassBodyWithMethodNoConstructor(
              NoClassVariables(
              ) [NoClassVariables]
              SingleOrEndOfListMethod(
                MethodDeclaration(
                  ReturnMethodTypeName(
                    Type(
                     char
                    ) [Type]
                   ord
                  ) [ReturnMethodTypeName]
                  FormalParameters(
                    SingleOrEndOfListParameter(
                      SingleFormalParameter(
                        Type(
                         char
                        ) [Type]
                       chr
                        VarDeclarationOfNotArray(
                        ) [VarDeclarationOfNotArray]
                      ) [SingleFormalParameter]
                    ) [SingleOrEndOfListParameter]
                  ) [FormalParameters]
                  MethodWithoutVariables(
                  ) [MethodWithoutVariables]
                  Statements(
                    NoStatements(
                    ) [NoStatements]
                    StatementReturnExpr(
                      TermPositiveExpr(
                        Term(
                          SingleFactor(
                            CharConstFactor(
                             1
                            ) [CharConstFactor]
                          ) [SingleFactor]
                        ) [Term]
                      ) [TermPositiveExpr]
                    ) [StatementReturnExpr]
                  ) [Statements]
                ) [MethodDeclaration]
              ) [SingleOrEndOfListMethod]
            ) [ClassBodyWithMethodNoConstructor]
          ) [ClassDeclaration]
        ) [ClassDeclarations]
        ClassDeclaration(
          NameOfClass(
           Lol2
          ) [NameOfClass]
          ClassIsExtended(
            Type(
             Lol
            ) [Type]
          ) [ClassIsExtended]
          ClassBodyNoMethod(
            ClassVariables(
              NoClassVariables(
              ) [NoClassVariables]
              ClassVarDeclaration(
                Type(
                 int
                ) [Type]
                ClassVarDecNotLast(
                  ClassVarDecLast(
                    ClassVariable(
                     a
                      VarDeclarationOfNotArray(
                      ) [VarDeclarationOfNotArray]
                    ) [ClassVariable]
                  ) [ClassVarDecLast]
                  ClassVariable(
                   b
                    VarDeclarationOfNotArray(
                    ) [VarDeclarationOfNotArray]
                  ) [ClassVariable]
                ) [ClassVarDecNotLast]
              ) [ClassVarDeclaration]
            ) [ClassVariables]
          ) [ClassBodyNoMethod]
        ) [ClassDeclaration]
      ) [ClassDeclarations]
      ClassDeclaration(
        NameOfClass(
         Lol4
        ) [NameOfClass]
        ClassIsExtended(
          Type(
           Lol3
          ) [Type]
        ) [ClassIsExtended]
        ClassBodyWithMethodNoConstructor(
          ClassVariables(
            NoClassVariables(
            ) [NoClassVariables]
            ClassVarDeclaration(
              Type(
               int
              ) [Type]
              ClassVarDecLast(
                ClassVariable(
                 c
                  VarDeclarationOfNotArray(
                  ) [VarDeclarationOfNotArray]
                ) [ClassVariable]
              ) [ClassVarDecLast]
            ) [ClassVarDeclaration]
          ) [ClassVariables]
          SingleOrEndOfListMethod(
            MethodDeclaration(
              VoidMethodTypeName(
               bb
              ) [VoidMethodTypeName]
              FormalParameters(
                SingleOrEndOfListParameter(
                  SingleFormalParameter(
                    Type(
                     int
                    ) [Type]
                   c
                    VarDeclarationOfNotArray(
                    ) [VarDeclarationOfNotArray]
                  ) [SingleFormalParameter]
                ) [SingleOrEndOfListParameter]
              ) [FormalParameters]
              MethodWithoutVariables(
              ) [MethodWithoutVariables]
              Statements(
                NoStatements(
                ) [NoStatements]
                StatementReturnExpr(
                  TermPositiveExpr(
                    Term(
                      SingleFactor(
                        NumberConstFactor(
                         1
                        ) [NumberConstFactor]
                      ) [SingleFactor]
                    ) [Term]
                  ) [TermPositiveExpr]
                ) [StatementReturnExpr]
              ) [Statements]
            ) [MethodDeclaration]
          ) [SingleOrEndOfListMethod]
        ) [ClassBodyWithMethodNoConstructor]
      ) [ClassDeclaration]
    ) [ClassDeclarations]
    ClassDeclaration(
      NameOfClass(
       Lol3
      ) [NameOfClass]
      ClassIsExtended(
        Type(
         Lol2
        ) [Type]
      ) [ClassIsExtended]
      ClassBodyWithMethodNoConstructor(
        ClassVariables(
          ClassVariables(
            NoClassVariables(
            ) [NoClassVariables]
            ClassVarDeclaration(
              Type(
               int
              ) [Type]
              ClassVarDecLast(
                ClassVariable(
                 a
                  VarDeclarationOfNotArray(
                  ) [VarDeclarationOfNotArray]
                ) [ClassVariable]
              ) [ClassVarDecLast]
            ) [ClassVarDeclaration]
          ) [ClassVariables]
          ClassVarDeclaration(
            Type(
             int
            ) [Type]
            ClassVarDecNotLast(
              ClassVarDecLast(
                ClassVariable(
                 c
                  VarDeclarationOfNotArray(
                  ) [VarDeclarationOfNotArray]
                ) [ClassVariable]
              ) [ClassVarDecLast]
              ClassVariable(
               d
                VarDeclarationOfNotArray(
                ) [VarDeclarationOfNotArray]
              ) [ClassVariable]
            ) [ClassVarDecNotLast]
          ) [ClassVarDeclaration]
        ) [ClassVariables]
        ListOfMethodsInClass(
          SingleOrEndOfListMethod(
            MethodDeclaration(
              VoidMethodTypeName(
               a
              ) [VoidMethodTypeName]
              FormalParameters(
                ListOfParameters(
                  SingleFormalParameter(
                    Type(
                     Lol
                    ) [Type]
                   x
                    VarDeclarationOfNotArray(
                    ) [VarDeclarationOfNotArray]
                  ) [SingleFormalParameter]
                  SingleOrEndOfListParameter(
                    SingleFormalParameter(
                      Type(
                       int
                      ) [Type]
                     x
                      VarDeclarationOfNotArray(
                      ) [VarDeclarationOfNotArray]
                    ) [SingleFormalParameter]
                  ) [SingleOrEndOfListParameter]
                ) [ListOfParameters]
              ) [FormalParameters]
              MethodVariables(
                MethodWithoutVariables(
                ) [MethodWithoutVariables]
                VarDeclaration(
                  Type(
                   Lol2
                  ) [Type]
                  VarDeclarationLast(
                    LastVarDeclarations(
                     x
                      VarDeclarationOfNotArray(
                      ) [VarDeclarationOfNotArray]
                    ) [LastVarDeclarations]
                  ) [VarDeclarationLast]
                ) [VarDeclaration]
              ) [MethodVariables]
              Statements(
                NoStatements(
                ) [NoStatements]
                StatementPrintWithoutWidth(
                  PrintEmptyDummy(
                  ) [PrintEmptyDummy]
                  TermPositiveExpr(
                    Term(
                      SingleFactor(
                        DesignatorFactor(
                          SimpleDesignator(
                           x
                          ) [SimpleDesignator]
                        ) [DesignatorFactor]
                      ) [SingleFactor]
                    ) [Term]
                  ) [TermPositiveExpr]
                ) [StatementPrintWithoutWidth]
              ) [Statements]
            ) [MethodDeclaration]
          ) [SingleOrEndOfListMethod]
          MethodDeclaration(
            VoidMethodTypeName(
             f
            ) [VoidMethodTypeName]
            NoFormalParameters(
            ) [NoFormalParameters]
            MethodVariables(
              MethodVariables(
                MethodWithoutVariables(
                ) [MethodWithoutVariables]
                VarDeclaration(
                  Type(
                   Lol
                  ) [Type]
                  VarDeclarationLast(
                    LastVarDeclarations(
                     c
                      VarDeclarationOfArray(
                      ) [VarDeclarationOfArray]
                    ) [LastVarDeclarations]
                  ) [VarDeclarationLast]
                ) [VarDeclaration]
              ) [MethodVariables]
              VarDeclaration(
                Type(
                 char
                ) [Type]
                VarDeclarationLast(
                  LastVarDeclarations(
                   c2
                    VarDeclarationOfNotArray(
                    ) [VarDeclarationOfNotArray]
                  ) [LastVarDeclarations]
                ) [VarDeclarationLast]
              ) [VarDeclaration]
            ) [MethodVariables]
            Statements(
              Statements(
                Statements(
                  Statements(
                    Statements(
                      Statements(
                        Statements(
                          Statements(
                            Statements(
                              Statements(
                                Statements(
                                  Statements(
                                    Statements(
                                      NoStatements(
                                      ) [NoStatements]
                                      StatementDesignator(
                                        DesignatorFuncCall(
                                          FuncCallFactorDesignator(
                                            ClassFieldDesignator(
                                              SimpleDesignator(
                                               this
                                              ) [SimpleDesignator]
                                             a
                                            ) [ClassFieldDesignator]
                                          ) [FuncCallFactorDesignator]
                                          NoActuals(
                                          ) [NoActuals]
                                        ) [DesignatorFuncCall]
                                      ) [StatementDesignator]
                                    ) [Statements]
                                    StatementDesignator(
                                      DesignatorAssignment(
                                        SimpleDesignator(
                                         a
                                        ) [SimpleDesignator]
                                        TermPositiveExpr(
                                          Term(
                                            SingleFactor(
                                              NumberConstFactor(
                                               1
                                              ) [NumberConstFactor]
                                            ) [SingleFactor]
                                          ) [Term]
                                        ) [TermPositiveExpr]
                                      ) [DesignatorAssignment]
                                    ) [StatementDesignator]
                                  ) [Statements]
                                  StatementDesignator(
                                    DesignatorFuncCall(
                                      FuncCallFactorDesignator(
                                        SimpleDesignator(
                                         ord
                                        ) [SimpleDesignator]
                                      ) [FuncCallFactorDesignator]
                                      Actuals(
                                        ActualParam(
                                          TermPositiveExpr(
                                            Term(
                                              SingleFactor(
                                                DesignatorFactor(
                                                  SimpleDesignator(
                                                   a
                                                  ) [SimpleDesignator]
                                                ) [DesignatorFactor]
                                              ) [SingleFactor]
                                            ) [Term]
                                          ) [TermPositiveExpr]
                                        ) [ActualParam]
                                      ) [Actuals]
                                    ) [DesignatorFuncCall]
                                  ) [StatementDesignator]
                                ) [Statements]
                                StatementDesignator(
                                  DesignatorAssignment(
                                    SimpleDesignator(
                                     c2
                                    ) [SimpleDesignator]
                                    TermPositiveExpr(
                                      Term(
                                        SingleFactor(
                                          FuncCallFactor(
                                            FuncCallFactorDesignator(
                                              SimpleDesignator(
                                               ord
                                              ) [SimpleDesignator]
                                            ) [FuncCallFactorDesignator]
                                            Actuals(
                                              ActualParam(
                                                TermPositiveExpr(
                                                  Term(
                                                    SingleFactor(
                                                      DesignatorFactor(
                                                        SimpleDesignator(
                                                         c2
                                                        ) [SimpleDesignator]
                                                      ) [DesignatorFactor]
                                                    ) [SingleFactor]
                                                  ) [Term]
                                                ) [TermPositiveExpr]
                                              ) [ActualParam]
                                            ) [Actuals]
                                          ) [FuncCallFactor]
                                        ) [SingleFactor]
                                      ) [Term]
                                    ) [TermPositiveExpr]
                                  ) [DesignatorAssignment]
                                ) [StatementDesignator]
                              ) [Statements]
                              StatementDesignator(
                                DesignatorInc(
                                  SimpleDesignator(
                                   a
                                  ) [SimpleDesignator]
                                ) [DesignatorInc]
                              ) [StatementDesignator]
                            ) [Statements]
                            StatementDesignator(
                              DesignatorDec(
                                SimpleDesignator(
                                 a
                                ) [SimpleDesignator]
                              ) [DesignatorDec]
                            ) [StatementDesignator]
                          ) [Statements]
                          StatementDesignator(
                            DesignatorArrayAssignment(
                              ListOfDesignator(
                                ListOfDesignator(
                                  ListOfDesignator(
                                    SingleOrEndOfListDesignator(
                                      Epsilon(
                                      ) [Epsilon]
                                    ) [SingleOrEndOfListDesignator]
                                    DesignArrAssignment(
                                      SimpleDesignator(
                                       a
                                      ) [SimpleDesignator]
                                    ) [DesignArrAssignment]
                                  ) [ListOfDesignator]
                                  DesignArrAssignment(
                                    SimpleDesignator(
                                     b
                                    ) [SimpleDesignator]
                                  ) [DesignArrAssignment]
                                ) [ListOfDesignator]
                                Epsilon(
                                ) [Epsilon]
                              ) [ListOfDesignator]
                              SimpleDesignator(
                               e
                              ) [SimpleDesignator]
                            ) [DesignatorArrayAssignment]
                          ) [StatementDesignator]
                        ) [Statements]
                        StatementDesignator(
                          DesignatorAssignment(
                            SimpleDesignator(
                             a
                            ) [SimpleDesignator]
                            AddExpr(
                              AddExpr(
                                TermPositiveExpr(
                                  Term(
                                    MultipleFactors(
                                      SingleFactor(
                                        DesignatorFactor(
                                          SimpleDesignator(
                                           b
                                          ) [SimpleDesignator]
                                        ) [DesignatorFactor]
                                      ) [SingleFactor]
                                      MultiplyOperator(
                                      ) [MultiplyOperator]
                                      DesignatorFactor(
                                        SimpleDesignator(
                                         c
                                        ) [SimpleDesignator]
                                      ) [DesignatorFactor]
                                    ) [MultipleFactors]
                                  ) [Term]
                                ) [TermPositiveExpr]
                                PlusOperator(
                                ) [PlusOperator]
                                Term(
                                  SingleFactor(
                                    ExprFactor(
                                      TermNegativeExpr(
                                        Term(
                                          SingleFactor(
                                            NumberConstFactor(
                                             1
                                            ) [NumberConstFactor]
                                          ) [SingleFactor]
                                        ) [Term]
                                      ) [TermNegativeExpr]
                                    ) [ExprFactor]
                                  ) [SingleFactor]
                                ) [Term]
                              ) [AddExpr]
                              MinusOperator(
                              ) [MinusOperator]
                              Term(
                                MultipleFactors(
                                  MultipleFactors(
                                    SingleFactor(
                                      NumberConstFactor(
                                       2
                                      ) [NumberConstFactor]
                                    ) [SingleFactor]
                                    DivideOperator(
                                    ) [DivideOperator]
                                    NumberConstFactor(
                                     4
                                    ) [NumberConstFactor]
                                  ) [MultipleFactors]
                                  ModuoOperator(
                                  ) [ModuoOperator]
                                  DesignatorFactor(
                                    SimpleDesignator(
                                     d
                                    ) [SimpleDesignator]
                                  ) [DesignatorFactor]
                                ) [MultipleFactors]
                              ) [Term]
                            ) [AddExpr]
                          ) [DesignatorAssignment]
                        ) [StatementDesignator]
                      ) [Statements]
                      StatementDesignator(
                        DesignatorAssignment(
                          SimpleDesignator(
                           b
                          ) [SimpleDesignator]
                          TermPositiveExpr(
                            Term(
                              SingleFactor(
                                NewClassWithActParsOperatorFactor(
                                  Type(
                                   Lol
                                  ) [Type]
                                  Actuals(
                                    ActualParams(
                                      ActualParams(
                                        ActualParam(
                                          TermPositiveExpr(
                                            Term(
                                              SingleFactor(
                                                NumberConstFactor(
                                                 1
                                                ) [NumberConstFactor]
                                              ) [SingleFactor]
                                            ) [Term]
                                          ) [TermPositiveExpr]
                                        ) [ActualParam]
                                        TermPositiveExpr(
                                          Term(
                                            SingleFactor(
                                              FuncCallFactor(
                                                FuncCallFactorDesignator(
                                                  SimpleDesignator(
                                                   f
                                                  ) [SimpleDesignator]
                                                ) [FuncCallFactorDesignator]
                                                NoActuals(
                                                ) [NoActuals]
                                              ) [FuncCallFactor]
                                            ) [SingleFactor]
                                          ) [Term]
                                        ) [TermPositiveExpr]
                                      ) [ActualParams]
                                      TermPositiveExpr(
                                        Term(
                                          SingleFactor(
                                            NumberConstFactor(
                                             2
                                            ) [NumberConstFactor]
                                          ) [SingleFactor]
                                        ) [Term]
                                      ) [TermPositiveExpr]
                                    ) [ActualParams]
                                  ) [Actuals]
                                ) [NewClassWithActParsOperatorFactor]
                              ) [SingleFactor]
                            ) [Term]
                          ) [TermPositiveExpr]
                        ) [DesignatorAssignment]
                      ) [StatementDesignator]
                    ) [Statements]
                    StatementDesignator(
                      DesignatorAssignment(
                        SimpleDesignator(
                         c
                        ) [SimpleDesignator]
                        TermPositiveExpr(
                          Term(
                            SingleFactor(
                              NewArrayOperatorFactor(
                                Type(
                                 Lol2
                                ) [Type]
                                TermPositiveExpr(
                                  Term(
                                    SingleFactor(
                                      DesignatorFactor(
                                        SimpleDesignator(
                                         a
                                        ) [SimpleDesignator]
                                      ) [DesignatorFactor]
                                    ) [SingleFactor]
                                  ) [Term]
                                ) [TermPositiveExpr]
                              ) [NewArrayOperatorFactor]
                            ) [SingleFactor]
                          ) [Term]
                        ) [TermPositiveExpr]
                      ) [DesignatorAssignment]
                    ) [StatementDesignator]
                  ) [Statements]
                  StatementDesignator(
                    DesignatorAssignment(
                      SimpleDesignator(
                       c
                      ) [SimpleDesignator]
                      TermPositiveExpr(
                        Term(
                          SingleFactor(
                            NewArrayOperatorFactor(
                              Type(
                               Lol2
                              ) [Type]
                              TermPositiveExpr(
                                Term(
                                  SingleFactor(
                                    DesignatorFactor(
                                      SimpleDesignator(
                                       c2
                                      ) [SimpleDesignator]
                                    ) [DesignatorFactor]
                                  ) [SingleFactor]
                                ) [Term]
                              ) [TermPositiveExpr]
                            ) [NewArrayOperatorFactor]
                          ) [SingleFactor]
                        ) [Term]
                      ) [TermPositiveExpr]
                    ) [DesignatorAssignment]
                  ) [StatementDesignator]
                ) [Statements]
                StatementDesignator(
                  DesignatorAssignment(
                    SimpleDesignator(
                     a
                    ) [SimpleDesignator]
                    TermPositiveExpr(
                      Term(
                        SingleFactor(
                          NewClassWithActParsOperatorFactor(
                            Type(
                             int
                            ) [Type]
                            NoActuals(
                            ) [NoActuals]
                          ) [NewClassWithActParsOperatorFactor]
                        ) [SingleFactor]
                      ) [Term]
                    ) [TermPositiveExpr]
                  ) [DesignatorAssignment]
                ) [StatementDesignator]
              ) [Statements]
              StatementIf(
                IfCondition(
                  OnlyIf(
                  ) [OnlyIf]
                  ConditionsWithoutOr(
                    ConditionsWithoutAnd(
                      SingleCondition(
                        TermPositiveExpr(
                          Term(
                            SingleFactor(
                              DesignatorFactor(
                                SimpleDesignator(
                                 a
                                ) [SimpleDesignator]
                              ) [DesignatorFactor]
                            ) [SingleFactor]
                          ) [Term]
                        ) [TermPositiveExpr]
                      ) [SingleCondition]
                    ) [ConditionsWithoutAnd]
                  ) [ConditionsWithoutOr]
                  FirstFixupForIf(
                  ) [FirstFixupForIf]
                ) [IfCondition]
                StatementBlock(
                  Statements(
                    Statements(
                      NoStatements(
                      ) [NoStatements]
                      StatementIf(
                        IfCondition(
                          OnlyIf(
                          ) [OnlyIf]
                          ConditionsWithOr(
                            ConditionsWithoutOr(
                              ConditionsWithoutAnd(
                                SingleCondition(
                                  TermPositiveExpr(
                                    Term(
                                      SingleFactor(
                                        DesignatorFactor(
                                          SimpleDesignator(
                                           g
                                          ) [SimpleDesignator]
                                        ) [DesignatorFactor]
                                      ) [SingleFactor]
                                    ) [Term]
                                  ) [TermPositiveExpr]
                                ) [SingleCondition]
                              ) [ConditionsWithoutAnd]
                            ) [ConditionsWithoutOr]
                            ConditionalJump(
                            ) [ConditionalJump]
                            ConditionsWithAnd(
                              ConditionsWithoutAnd(
                                SingleCondition(
                                  TermPositiveExpr(
                                    Term(
                                      SingleFactor(
                                        DesignatorFactor(
                                          SimpleDesignator(
                                           a
                                          ) [SimpleDesignator]
                                        ) [DesignatorFactor]
                                      ) [SingleFactor]
                                    ) [Term]
                                  ) [TermPositiveExpr]
                                ) [SingleCondition]
                              ) [ConditionsWithoutAnd]
                              RelopCondition(
                                TermPositiveExpr(
                                  Term(
                                    SingleFactor(
                                      DesignatorFactor(
                                        ArrayDesignator(
                                          ArrayDesig(
                                            SimpleDesignator(
                                             c
                                            ) [SimpleDesignator]
                                          ) [ArrayDesig]
                                          TermPositiveExpr(
                                            Term(
                                              SingleFactor(
                                                NumberConstFactor(
                                                 0
                                                ) [NumberConstFactor]
                                              ) [SingleFactor]
                                            ) [Term]
                                          ) [TermPositiveExpr]
                                        ) [ArrayDesignator]
                                      ) [DesignatorFactor]
                                    ) [SingleFactor]
                                  ) [Term]
                                ) [TermPositiveExpr]
                                LessOperator(
                                ) [LessOperator]
                                TermPositiveExpr(
                                  Term(
                                    SingleFactor(
                                      DesignatorFactor(
                                        ArrayDesignator(
                                          ArrayDesig(
                                            SimpleDesignator(
                                             c
                                            ) [SimpleDesignator]
                                          ) [ArrayDesig]
                                          TermPositiveExpr(
                                            Term(
                                              SingleFactor(
                                                NumberConstFactor(
                                                 1
                                                ) [NumberConstFactor]
                                              ) [SingleFactor]
                                            ) [Term]
                                          ) [TermPositiveExpr]
                                        ) [ArrayDesignator]
                                      ) [DesignatorFactor]
                                    ) [SingleFactor]
                                  ) [Term]
                                ) [TermPositiveExpr]
                              ) [RelopCondition]
                            ) [ConditionsWithAnd]
                          ) [ConditionsWithOr]
                          FirstFixupForIf(
                          ) [FirstFixupForIf]
                        ) [IfCondition]
                        StatementBlock(
                          NoStatements(
                          ) [NoStatements]
                        ) [StatementBlock]
                        SecondFixupForIf(
                        ) [SecondFixupForIf]
                      ) [StatementIf]
                    ) [Statements]
                    StatementBreak(
                    ) [StatementBreak]
                  ) [Statements]
                ) [StatementBlock]
                SecondFixupForIf(
                ) [SecondFixupForIf]
              ) [StatementIf]
            ) [Statements]
          ) [MethodDeclaration]
        ) [ListOfMethodsInClass]
      ) [ClassBodyWithMethodNoConstructor]
    ) [ClassDeclaration]
  ) [ClassDeclarations]
  MethodDeclarations(
    MethodDeclarations(
      NoMethodDeclarations(
      ) [NoMethodDeclarations]
      MethodDeclaration(
        VoidMethodTypeName(
         lol
        ) [VoidMethodTypeName]
        NoFormalParameters(
        ) [NoFormalParameters]
        MethodWithoutVariables(
        ) [MethodWithoutVariables]
        NoStatements(
        ) [NoStatements]
      ) [MethodDeclaration]
    ) [MethodDeclarations]
    MethodDeclaration(
      ReturnMethodTypeName(
        Type(
         Lol
        ) [Type]
       lol2
      ) [ReturnMethodTypeName]
      FormalParameters(
        SingleOrEndOfListParameter(
          SingleFormalParameter(
            Type(
             int
            ) [Type]
           a
            VarDeclarationOfNotArray(
            ) [VarDeclarationOfNotArray]
          ) [SingleFormalParameter]
        ) [SingleOrEndOfListParameter]
      ) [FormalParameters]
      MethodVariables(
        MethodWithoutVariables(
        ) [MethodWithoutVariables]
        VarDeclaration(
          Type(
           int
          ) [Type]
          VarDeclarationNotLast(
            NotLastVarDeclarations(
             b
              VarDeclarationOfNotArray(
              ) [VarDeclarationOfNotArray]
            ) [NotLastVarDeclarations]
            VarDeclarationLast(
              LastVarDeclarations(
               c
                VarDeclarationOfArray(
                ) [VarDeclarationOfArray]
              ) [LastVarDeclarations]
            ) [VarDeclarationLast]
          ) [VarDeclarationNotLast]
        ) [VarDeclaration]
      ) [MethodVariables]
      NoStatements(
      ) [NoStatements]
    ) [MethodDeclaration]
  ) [MethodDeclarations]
) [Program]
INFO  19:51:49,919 - ====================================
INFO  19:51:49,926 - Kreirana je promenjiva a na liniji 3
ERROR 19:51:49,927 - SEMANTICKA GRESKA: Ime b je vec deklarisano na liniji 5
INFO  19:51:49,927 - Kreirana je promenjiva d na liniji 6
INFO  19:51:49,927 - Kreirana je promenjiva e[] na liniji 6
INFO  19:51:49,927 - Kreirana je klasa Lol na liniji 10
INFO  19:51:49,927 - Definicija metode ord na liniji 12
INFO  19:51:49,927 - Kreirana je klasa Lol2 na liniji 17
INFO  19:51:49,928 - Kreirana je klasa Lol4 na liniji 20
ERROR 19:51:49,928 - SEMANTICKA GRESKA: Nije pronadjen tip Lol3 u tabeli simbola na liniji 20
ERROR 19:51:49,928 - SEMANTICKA GRESKA: Nadklasa sa imenom Lol3 ne postoji na liniji 20
INFO  19:51:49,928 - Definicija metode bb na liniji 23
ERROR 19:51:49,928 - SEMANTICKA GRESKA: Return naredba ne sme postojavi u telu void metode ili funkcije na liniji 24
INFO  19:51:49,928 - Kreirana je klasa Lol3 na liniji 28
ERROR 19:51:49,928 - SEMANTICKA GRESKA: Ime polja a je ranije vec deklarisano na liniji 29
INFO  19:51:49,928 - Definicija metode a na liniji 33
ERROR 19:51:49,929 - SEMANTICKA GRESKA: Ime formalnog parametra x je vec deklarisano na liniji 33
ERROR 19:51:49,929 - SEMANTICKA GRESKA: Ime promenljive x je vec deklarisano na liniji 33
INFO  19:51:49,929 - Prepoznata naredba print
ERROR 19:51:49,929 - SEMANTICKA GRESKA: Expr na liniji 31 nije tipa int, char ili bool na liniji 31
ERROR 19:51:49,929 - SEMANTICKA GRESKA: Funcija a nema return iskaz  na liniji 33
INFO  19:51:49,929 - Definicija metode f na liniji 36
INFO  19:51:49,929 - Kreirana je promenjiva c[] na liniji 36
INFO  19:51:49,929 - Kreirana je promenjiva c2 na liniji 36
INFO  19:51:49,930 - Pristup polju this.a na liniji 37
ERROR 19:51:49,930 - SEMANTICKA GRESKA: a ne predstavlja funkciju na liniji 37
