INFO  23:05:40,872 - Compiling source file: C:\Users\el190235d\Desktop\PP1\projekat\pp1lab.templateAST\pp1lab.templateAST\workspace\MJCompiler\test\sem_test.mj
INFO  23:05:40,916 - #2 program
INFO  23:05:40,917 - #47 test301
INFO  23:05:40,917 - #47 int
INFO  23:05:40,918 - #47 a
INFO  23:05:40,919 - #37 ,
INFO  23:05:40,920 - #47 niz
INFO  23:05:40,920 - #41 [
INFO  23:05:40,920 - #42 ]
INFO  23:05:40,920 - #35 ;
INFO  23:05:40,921 - #43 {
INFO  23:05:40,922 - #47 int
INFO  23:05:40,923 - #47 sum
INFO  23:05:40,923 - #39 (
INFO  23:05:40,924 - #47 int
INFO  23:05:40,924 - #47 z
INFO  23:05:40,924 - #37 ,
INFO  23:05:40,924 - #47 int
INFO  23:05:40,924 - #47 d
INFO  23:05:40,924 - #40 )
INFO  23:05:40,924 - #43 {
INFO  23:05:40,925 - #4 return
INFO  23:05:40,925 - #47 z
INFO  23:05:40,925 - #19 +
INFO  23:05:40,926 - #47 d
INFO  23:05:40,928 - #35 ;
INFO  23:05:40,928 - #44 }
INFO  23:05:40,928 - #47 int
INFO  23:05:40,929 - #47 inkrement
INFO  23:05:40,929 - #39 (
INFO  23:05:40,929 - #47 int
INFO  23:05:40,929 - #47 a
INFO  23:05:40,929 - #37 ,
INFO  23:05:40,929 - #47 int
INFO  23:05:40,929 - #47 inc
INFO  23:05:40,929 - #40 )
INFO  23:05:40,930 - #47 int
INFO  23:05:40,930 - #47 pom
INFO  23:05:40,930 - #35 ;
INFO  23:05:40,930 - #43 {
INFO  23:05:40,930 - #9 if
INFO  23:05:40,930 - #39 (
INFO  23:05:40,930 - #47 inc
INFO  23:05:40,930 - #24 ==
INFO  23:05:40,930 - #47 jedan
INFO  23:05:40,931 - #40 )
INFO  23:05:40,932 - #47 pom
INFO  23:05:40,932 - #32 =
INFO  23:05:40,932 - #46 1
INFO  23:05:40,932 - #35 ;
INFO  23:05:40,932 - #7 else
INFO  23:05:40,932 - #9 if
INFO  23:05:40,932 - #39 (
INFO  23:05:40,932 - #47 inc
INFO  23:05:40,932 - #24 ==
INFO  23:05:40,932 - #46 2
INFO  23:05:40,932 - #40 )
INFO  23:05:40,932 - #47 pom
INFO  23:05:40,933 - #32 =
INFO  23:05:40,933 - #47 a
INFO  23:05:40,933 - #35 ;
INFO  23:05:40,933 - #4 return
INFO  23:05:40,933 - #46 5
INFO  23:05:40,933 - #35 ;
INFO  23:05:40,933 - #44 }
INFO  23:05:40,933 - #47 bool
INFO  23:05:40,933 - #47 verify
INFO  23:05:40,933 - #39 (
INFO  23:05:40,933 - #40 )
INFO  23:05:40,933 - #43 {
INFO  23:05:40,934 - #3 print
INFO  23:05:40,934 - #39 (
INFO  23:05:40,935 - #48 v
INFO  23:05:40,935 - #40 )
INFO  23:05:40,935 - #35 ;
INFO  23:05:40,935 - #4 return
INFO  23:05:40,935 - #49 false
INFO  23:05:40,935 - #35 ;
INFO  23:05:40,935 - #44 }
INFO  23:05:40,935 - #14 void
INFO  23:05:40,935 - #47 main
INFO  23:05:40,935 - #39 (
INFO  23:05:40,935 - #40 )
INFO  23:05:40,935 - #43 {
INFO  23:05:40,935 - #47 a
INFO  23:05:40,935 - #32 =
INFO  23:05:40,935 - #46 2
INFO  23:05:40,935 - #35 ;
INFO  23:05:40,936 - #47 niz
INFO  23:05:40,936 - #32 =
INFO  23:05:40,936 - #12 new
INFO  23:05:40,936 - #47 int
INFO  23:05:40,936 - #41 [
INFO  23:05:40,936 - #46 3
INFO  23:05:40,936 - #42 ]
INFO  23:05:40,936 - #35 ;
INFO  23:05:40,936 - #47 niz
INFO  23:05:40,936 - #41 [
INFO  23:05:40,936 - #46 0
INFO  23:05:40,936 - #42 ]
INFO  23:05:40,936 - #32 =
INFO  23:05:40,936 - #46 1
INFO  23:05:40,936 - #21 *
INFO  23:05:40,937 - #47 a
INFO  23:05:40,938 - #35 ;
INFO  23:05:40,938 - #47 niz
INFO  23:05:40,938 - #41 [
INFO  23:05:40,938 - #46 1
INFO  23:05:40,938 - #42 ]
INFO  23:05:40,938 - #32 =
INFO  23:05:40,938 - #46 2
INFO  23:05:40,938 - #21 *
INFO  23:05:40,938 - #47 a
INFO  23:05:40,938 - #35 ;
INFO  23:05:40,938 - #47 niz
INFO  23:05:40,938 - #41 [
INFO  23:05:40,938 - #46 2
INFO  23:05:40,939 - #42 ]
INFO  23:05:40,939 - #32 =
INFO  23:05:40,939 - #47 sum
INFO  23:05:40,939 - #39 (
INFO  23:05:40,939 - #47 niz
INFO  23:05:40,939 - #41 [
INFO  23:05:40,939 - #46 1
INFO  23:05:40,939 - #42 ]
INFO  23:05:40,940 - #37 ,
INFO  23:05:40,940 - #47 niz
INFO  23:05:40,940 - #41 [
INFO  23:05:40,940 - #46 0
INFO  23:05:40,940 - #42 ]
INFO  23:05:40,940 - #40 )
INFO  23:05:40,940 - #21 *
INFO  23:05:40,941 - #47 a
INFO  23:05:40,941 - #19 +
INFO  23:05:40,941 - #46 1
INFO  23:05:40,941 - #35 ;
INFO  23:05:40,941 - #9 if
INFO  23:05:40,941 - #39 (
INFO  23:05:40,941 - #47 verify
INFO  23:05:40,941 - #39 (
INFO  23:05:40,941 - #40 )
INFO  23:05:40,942 - #31 ||
INFO  23:05:40,942 - #47 niz
INFO  23:05:40,943 - #41 [
INFO  23:05:40,943 - #46 2
INFO  23:05:40,943 - #42 ]
INFO  23:05:40,943 - #24 ==
INFO  23:05:40,943 - #46 4
INFO  23:05:40,943 - #40 )
INFO  23:05:40,943 - #3 print
INFO  23:05:40,943 - #39 (
INFO  23:05:40,943 - #47 ord
INFO  23:05:40,944 - #39 (
INFO  23:05:40,944 - #48 A
INFO  23:05:40,944 - #40 )
INFO  23:05:40,944 - #40 )
INFO  23:05:40,944 - #35 ;
INFO  23:05:40,944 - #7 else
INFO  23:05:40,944 - #3 print
INFO  23:05:40,944 - #39 (
INFO  23:05:40,944 - #47 ord
INFO  23:05:40,944 - #39 (
INFO  23:05:40,944 - #48 a
INFO  23:05:40,944 - #40 )
INFO  23:05:40,944 - #40 )
INFO  23:05:40,945 - #35 ;
INFO  23:05:40,945 - #44 }
INFO  23:05:40,945 - #44 }
INFO  23:05:40,950 - Program(
  ProgName(
   test301
  ) [ProgName]
  VarDeclarations(
    NoVarDecl(
    ) [NoVarDecl]
    VarDeclaration(
      Type(
       int
      ) [Type]
      VarDeclarationNotLast(
        NotLastVarDeclarations(
         a
          VarDeclarationOfNotArray(
          ) [VarDeclarationOfNotArray]
        ) [NotLastVarDeclarations]
        VarDeclarationLast(
          LastVarDeclarations(
           niz
            VarDeclarationOfArray(
            ) [VarDeclarationOfArray]
          ) [LastVarDeclarations]
        ) [VarDeclarationLast]
      ) [VarDeclarationNotLast]
    ) [VarDeclaration]
  ) [VarDeclarations]
  MethodDeclarations(
    MethodDeclarations(
      MethodDeclarations(
        MethodDeclarations(
          NoMethodDeclarations(
          ) [NoMethodDeclarations]
          MethodDeclaration(
            ReturnMethodTypeName(
              Type(
               int
              ) [Type]
             sum
            ) [ReturnMethodTypeName]
            FormalParameters(
              ListOfParameters(
                SingleFormalParameter(
                  Type(
                   int
                  ) [Type]
                 z
                  VarDeclarationOfNotArray(
                  ) [VarDeclarationOfNotArray]
                ) [SingleFormalParameter]
                SingleOrEndOfListParameter(
                  SingleFormalParameter(
                    Type(
                     int
                    ) [Type]
                   d
                    VarDeclarationOfNotArray(
                    ) [VarDeclarationOfNotArray]
                  ) [SingleFormalParameter]
                ) [SingleOrEndOfListParameter]
              ) [ListOfParameters]
            ) [FormalParameters]
            MethodWithoutVariables(
            ) [MethodWithoutVariables]
            Statements(
              NoStatements(
              ) [NoStatements]
              StatementReturnExpr(
                AddExpr(
                  TermPositiveExpr(
                    Term(
                      SingleFactor(
                        DesignatorFactor(
                          SimpleDesignator(
                           z
                          ) [SimpleDesignator]
                        ) [DesignatorFactor]
                      ) [SingleFactor]
                    ) [Term]
                  ) [TermPositiveExpr]
                  PlusOperator(
                  ) [PlusOperator]
                  Term(
                    SingleFactor(
                      DesignatorFactor(
                        SimpleDesignator(
                         d
                        ) [SimpleDesignator]
                      ) [DesignatorFactor]
                    ) [SingleFactor]
                  ) [Term]
                ) [AddExpr]
              ) [StatementReturnExpr]
            ) [Statements]
          ) [MethodDeclaration]
        ) [MethodDeclarations]
        MethodDeclaration(
          ReturnMethodTypeName(
            Type(
             int
            ) [Type]
           inkrement
          ) [ReturnMethodTypeName]
          FormalParameters(
            ListOfParameters(
              SingleFormalParameter(
                Type(
                 int
                ) [Type]
               a
                VarDeclarationOfNotArray(
                ) [VarDeclarationOfNotArray]
              ) [SingleFormalParameter]
              SingleOrEndOfListParameter(
                SingleFormalParameter(
                  Type(
                   int
                  ) [Type]
                 inc
                  VarDeclarationOfNotArray(
                  ) [VarDeclarationOfNotArray]
                ) [SingleFormalParameter]
              ) [SingleOrEndOfListParameter]
            ) [ListOfParameters]
          ) [FormalParameters]
          MethodVariables(
            MethodWithoutVariables(
            ) [MethodWithoutVariables]
            VarDeclaration(
              Type(
               int
              ) [Type]
              VarDeclarationLast(
                LastVarDeclarations(
                 pom
                  VarDeclarationOfNotArray(
                  ) [VarDeclarationOfNotArray]
                ) [LastVarDeclarations]
              ) [VarDeclarationLast]
            ) [VarDeclaration]
          ) [MethodVariables]
          Statements(
            Statements(
              NoStatements(
              ) [NoStatements]
              StatementIfElse(
                IfCondition(
                  ConditionsWithoutOr(
                    ConditionsWithoutAnd(
                      RelopCondition(
                        TermPositiveExpr(
                          Term(
                            SingleFactor(
                              DesignatorFactor(
                                SimpleDesignator(
                                 inc
                                ) [SimpleDesignator]
                              ) [DesignatorFactor]
                            ) [SingleFactor]
                          ) [Term]
                        ) [TermPositiveExpr]
                        EqualOperator(
                        ) [EqualOperator]
                        TermPositiveExpr(
                          Term(
                            SingleFactor(
                              DesignatorFactor(
                                SimpleDesignator(
                                 jedan
                                ) [SimpleDesignator]
                              ) [DesignatorFactor]
                            ) [SingleFactor]
                          ) [Term]
                        ) [TermPositiveExpr]
                      ) [RelopCondition]
                    ) [ConditionsWithoutAnd]
                  ) [ConditionsWithoutOr]
                ) [IfCondition]
                StatementDesignator(
                  DesignatorAssignment(
                    SimpleDesignator(
                     pom
                    ) [SimpleDesignator]
                    TermPositiveExpr(
                      Term(
                        SingleFactor(
                          NumberConstFactor(
                           1
                          ) [NumberConstFactor]
                        ) [SingleFactor]
                      ) [Term]
                    ) [TermPositiveExpr]
                  ) [DesignatorAssignment]
                ) [StatementDesignator]
                StatementIf(
                  IfCondition(
                    ConditionsWithoutOr(
                      ConditionsWithoutAnd(
                        RelopCondition(
                          TermPositiveExpr(
                            Term(
                              SingleFactor(
                                DesignatorFactor(
                                  SimpleDesignator(
                                   inc
                                  ) [SimpleDesignator]
                                ) [DesignatorFactor]
                              ) [SingleFactor]
                            ) [Term]
                          ) [TermPositiveExpr]
                          EqualOperator(
                          ) [EqualOperator]
                          TermPositiveExpr(
                            Term(
                              SingleFactor(
                                NumberConstFactor(
                                 2
                                ) [NumberConstFactor]
                              ) [SingleFactor]
                            ) [Term]
                          ) [TermPositiveExpr]
                        ) [RelopCondition]
                      ) [ConditionsWithoutAnd]
                    ) [ConditionsWithoutOr]
                  ) [IfCondition]
                  StatementDesignator(
                    DesignatorAssignment(
                      SimpleDesignator(
                       pom
                      ) [SimpleDesignator]
                      TermPositiveExpr(
                        Term(
                          SingleFactor(
                            DesignatorFactor(
                              SimpleDesignator(
                               a
                              ) [SimpleDesignator]
                            ) [DesignatorFactor]
                          ) [SingleFactor]
                        ) [Term]
                      ) [TermPositiveExpr]
                    ) [DesignatorAssignment]
                  ) [StatementDesignator]
                ) [StatementIf]
              ) [StatementIfElse]
            ) [Statements]
            StatementReturnExpr(
              TermPositiveExpr(
                Term(
                  SingleFactor(
                    NumberConstFactor(
                     5
                    ) [NumberConstFactor]
                  ) [SingleFactor]
                ) [Term]
              ) [TermPositiveExpr]
            ) [StatementReturnExpr]
          ) [Statements]
        ) [MethodDeclaration]
      ) [MethodDeclarations]
      MethodDeclaration(
        ReturnMethodTypeName(
          Type(
           bool
          ) [Type]
         verify
        ) [ReturnMethodTypeName]
        NoFormalParameters(
        ) [NoFormalParameters]
        MethodWithoutVariables(
        ) [MethodWithoutVariables]
        Statements(
          Statements(
            NoStatements(
            ) [NoStatements]
            StatementPrintWithoutWidth(
              TermPositiveExpr(
                Term(
                  SingleFactor(
                    CharConstFactor(
                     v
                    ) [CharConstFactor]
                  ) [SingleFactor]
                ) [Term]
              ) [TermPositiveExpr]
            ) [StatementPrintWithoutWidth]
          ) [Statements]
          StatementReturnExpr(
            TermPositiveExpr(
              Term(
                SingleFactor(
                  BooleanConstFactor(
                   false
                  ) [BooleanConstFactor]
                ) [SingleFactor]
              ) [Term]
            ) [TermPositiveExpr]
          ) [StatementReturnExpr]
        ) [Statements]
      ) [MethodDeclaration]
    ) [MethodDeclarations]
    MethodDeclaration(
      VoidMethodTypeName(
       main
      ) [VoidMethodTypeName]
      NoFormalParameters(
      ) [NoFormalParameters]
      MethodWithoutVariables(
      ) [MethodWithoutVariables]
      Statements(
        Statements(
          Statements(
            Statements(
              Statements(
                Statements(
                  NoStatements(
                  ) [NoStatements]
                  StatementDesignator(
                    DesignatorAssignment(
                      SimpleDesignator(
                       a
                      ) [SimpleDesignator]
                      TermPositiveExpr(
                        Term(
                          SingleFactor(
                            NumberConstFactor(
                             2
                            ) [NumberConstFactor]
                          ) [SingleFactor]
                        ) [Term]
                      ) [TermPositiveExpr]
                    ) [DesignatorAssignment]
                  ) [StatementDesignator]
                ) [Statements]
                StatementDesignator(
                  DesignatorAssignment(
                    SimpleDesignator(
                     niz
                    ) [SimpleDesignator]
                    TermPositiveExpr(
                      Term(
                        SingleFactor(
                          NewArrayOperatorFactor(
                            Type(
                             int
                            ) [Type]
                            TermPositiveExpr(
                              Term(
                                SingleFactor(
                                  NumberConstFactor(
                                   3
                                  ) [NumberConstFactor]
                                ) [SingleFactor]
                              ) [Term]
                            ) [TermPositiveExpr]
                          ) [NewArrayOperatorFactor]
                        ) [SingleFactor]
                      ) [Term]
                    ) [TermPositiveExpr]
                  ) [DesignatorAssignment]
                ) [StatementDesignator]
              ) [Statements]
              StatementDesignator(
                DesignatorAssignment(
                  ArrayDesignator(
                    SimpleDesignator(
                     niz
                    ) [SimpleDesignator]
                    TermPositiveExpr(
                      Term(
                        SingleFactor(
                          NumberConstFactor(
                           0
                          ) [NumberConstFactor]
                        ) [SingleFactor]
                      ) [Term]
                    ) [TermPositiveExpr]
                  ) [ArrayDesignator]
                  TermPositiveExpr(
                    Term(
                      MultipleFactors(
                        SingleFactor(
                          NumberConstFactor(
                           1
                          ) [NumberConstFactor]
                        ) [SingleFactor]
                        MultiplyOperator(
                        ) [MultiplyOperator]
                        DesignatorFactor(
                          SimpleDesignator(
                           a
                          ) [SimpleDesignator]
                        ) [DesignatorFactor]
                      ) [MultipleFactors]
                    ) [Term]
                  ) [TermPositiveExpr]
                ) [DesignatorAssignment]
              ) [StatementDesignator]
            ) [Statements]
            StatementDesignator(
              DesignatorAssignment(
                ArrayDesignator(
                  SimpleDesignator(
                   niz
                  ) [SimpleDesignator]
                  TermPositiveExpr(
                    Term(
                      SingleFactor(
                        NumberConstFactor(
                         1
                        ) [NumberConstFactor]
                      ) [SingleFactor]
                    ) [Term]
                  ) [TermPositiveExpr]
                ) [ArrayDesignator]
                TermPositiveExpr(
                  Term(
                    MultipleFactors(
                      SingleFactor(
                        NumberConstFactor(
                         2
                        ) [NumberConstFactor]
                      ) [SingleFactor]
                      MultiplyOperator(
                      ) [MultiplyOperator]
                      DesignatorFactor(
                        SimpleDesignator(
                         a
                        ) [SimpleDesignator]
                      ) [DesignatorFactor]
                    ) [MultipleFactors]
                  ) [Term]
                ) [TermPositiveExpr]
              ) [DesignatorAssignment]
            ) [StatementDesignator]
          ) [Statements]
          StatementDesignator(
            DesignatorAssignment(
              ArrayDesignator(
                SimpleDesignator(
                 niz
                ) [SimpleDesignator]
                TermPositiveExpr(
                  Term(
                    SingleFactor(
                      NumberConstFactor(
                       2
                      ) [NumberConstFactor]
                    ) [SingleFactor]
                  ) [Term]
                ) [TermPositiveExpr]
              ) [ArrayDesignator]
              AddExpr(
                TermPositiveExpr(
                  Term(
                    MultipleFactors(
                      SingleFactor(
                        FuncCallFactor(
                          FuncCallFactorDesignator(
                            SimpleDesignator(
                             sum
                            ) [SimpleDesignator]
                          ) [FuncCallFactorDesignator]
                          Actuals(
                            ActualParams(
                              ActualParam(
                                TermPositiveExpr(
                                  Term(
                                    SingleFactor(
                                      DesignatorFactor(
                                        ArrayDesignator(
                                          SimpleDesignator(
                                           niz
                                          ) [SimpleDesignator]
                                          TermPositiveExpr(
                                            Term(
                                              SingleFactor(
                                                NumberConstFactor(
                                                 1
                                                ) [NumberConstFactor]
                                              ) [SingleFactor]
                                            ) [Term]
                                          ) [TermPositiveExpr]
                                        ) [ArrayDesignator]
                                      ) [DesignatorFactor]
                                    ) [SingleFactor]
                                  ) [Term]
                                ) [TermPositiveExpr]
                              ) [ActualParam]
                              TermPositiveExpr(
                                Term(
                                  SingleFactor(
                                    DesignatorFactor(
                                      ArrayDesignator(
                                        SimpleDesignator(
                                         niz
                                        ) [SimpleDesignator]
                                        TermPositiveExpr(
                                          Term(
                                            SingleFactor(
                                              NumberConstFactor(
                                               0
                                              ) [NumberConstFactor]
                                            ) [SingleFactor]
                                          ) [Term]
                                        ) [TermPositiveExpr]
                                      ) [ArrayDesignator]
                                    ) [DesignatorFactor]
                                  ) [SingleFactor]
                                ) [Term]
                              ) [TermPositiveExpr]
                            ) [ActualParams]
                          ) [Actuals]
                        ) [FuncCallFactor]
                      ) [SingleFactor]
                      MultiplyOperator(
                      ) [MultiplyOperator]
                      DesignatorFactor(
                        SimpleDesignator(
                         a
                        ) [SimpleDesignator]
                      ) [DesignatorFactor]
                    ) [MultipleFactors]
                  ) [Term]
                ) [TermPositiveExpr]
                PlusOperator(
                ) [PlusOperator]
                Term(
                  SingleFactor(
                    NumberConstFactor(
                     1
                    ) [NumberConstFactor]
                  ) [SingleFactor]
                ) [Term]
              ) [AddExpr]
            ) [DesignatorAssignment]
          ) [StatementDesignator]
        ) [Statements]
        StatementIfElse(
          IfCondition(
            ConditionsWithOr(
              ConditionsWithoutOr(
                ConditionsWithoutAnd(
                  SingleCondition(
                    TermPositiveExpr(
                      Term(
                        SingleFactor(
                          FuncCallFactor(
                            FuncCallFactorDesignator(
                              SimpleDesignator(
                               verify
                              ) [SimpleDesignator]
                            ) [FuncCallFactorDesignator]
                            NoActuals(
                            ) [NoActuals]
                          ) [FuncCallFactor]
                        ) [SingleFactor]
                      ) [Term]
                    ) [TermPositiveExpr]
                  ) [SingleCondition]
                ) [ConditionsWithoutAnd]
              ) [ConditionsWithoutOr]
              ConditionsWithoutAnd(
                RelopCondition(
                  TermPositiveExpr(
                    Term(
                      SingleFactor(
                        DesignatorFactor(
                          ArrayDesignator(
                            SimpleDesignator(
                             niz
                            ) [SimpleDesignator]
                            TermPositiveExpr(
                              Term(
                                SingleFactor(
                                  NumberConstFactor(
                                   2
                                  ) [NumberConstFactor]
                                ) [SingleFactor]
                              ) [Term]
                            ) [TermPositiveExpr]
                          ) [ArrayDesignator]
                        ) [DesignatorFactor]
                      ) [SingleFactor]
                    ) [Term]
                  ) [TermPositiveExpr]
                  EqualOperator(
                  ) [EqualOperator]
                  TermPositiveExpr(
                    Term(
                      SingleFactor(
                        NumberConstFactor(
                         4
                        ) [NumberConstFactor]
                      ) [SingleFactor]
                    ) [Term]
                  ) [TermPositiveExpr]
                ) [RelopCondition]
              ) [ConditionsWithoutAnd]
            ) [ConditionsWithOr]
          ) [IfCondition]
          StatementPrintWithoutWidth(
            TermPositiveExpr(
              Term(
                SingleFactor(
                  FuncCallFactor(
                    FuncCallFactorDesignator(
                      SimpleDesignator(
                       ord
                      ) [SimpleDesignator]
                    ) [FuncCallFactorDesignator]
                    Actuals(
                      ActualParam(
                        TermPositiveExpr(
                          Term(
                            SingleFactor(
                              CharConstFactor(
                               A
                              ) [CharConstFactor]
                            ) [SingleFactor]
                          ) [Term]
                        ) [TermPositiveExpr]
                      ) [ActualParam]
                    ) [Actuals]
                  ) [FuncCallFactor]
                ) [SingleFactor]
              ) [Term]
            ) [TermPositiveExpr]
          ) [StatementPrintWithoutWidth]
          StatementPrintWithoutWidth(
            TermPositiveExpr(
              Term(
                SingleFactor(
                  FuncCallFactor(
                    FuncCallFactorDesignator(
                      SimpleDesignator(
                       ord
                      ) [SimpleDesignator]
                    ) [FuncCallFactorDesignator]
                    Actuals(
                      ActualParam(
                        TermPositiveExpr(
                          Term(
                            SingleFactor(
                              CharConstFactor(
                               a
                              ) [CharConstFactor]
                            ) [SingleFactor]
                          ) [Term]
                        ) [TermPositiveExpr]
                      ) [ActualParam]
                    ) [Actuals]
                  ) [FuncCallFactor]
                ) [SingleFactor]
              ) [Term]
            ) [TermPositiveExpr]
          ) [StatementPrintWithoutWidth]
        ) [StatementIfElse]
      ) [Statements]
    ) [MethodDeclaration]
  ) [MethodDeclarations]
) [Program]
INFO  23:05:40,951 - ====================================
INFO  23:05:40,955 - Kreirana je promenjiva a na liniji 3
INFO  23:05:40,955 - Kreirana je promenjiva niz[] na liniji 3
INFO  23:05:40,955 - Definicija funkcije sum na liniji 6
INFO  23:05:40,955 - Definicija funkcije inkrement na liniji 12
INFO  23:05:40,955 - Kreirana je promenjiva pom na liniji 13
ERROR 23:05:40,955 - SEMANTICKA GRESKA: Nije deklarisana promenljiva sa imenom jedan na liniji 15
ERROR 23:05:40,956 - SEMANTICKA GRESKA: Izrazi u uslovu kontrole moraju biti uporedivi na liniji 15
INFO  23:05:40,956 - Definicija funkcije verify na liniji 21
INFO  23:05:40,956 - Prepoznata naredba print
INFO  23:05:40,956 - Definicija funkcije main na liniji 27
INFO  23:05:40,956 - Pristup elemntu niza niz na liniji 31
INFO  23:05:40,956 - Pristup elemntu niza niz na liniji 32
INFO  23:05:40,956 - Pristup elemntu niza niz na liniji 33
INFO  23:05:40,956 - FCsum na liniji 33
INFO  23:05:40,956 - Pristup elemntu niza niz na liniji 33
INFO  23:05:40,956 - 0  na liniji 33
INFO  23:05:40,956 - Pristup elemntu niza niz na liniji 33
ERROR 23:05:40,957 - SEMANTICKA GRESKA: Nije deklarisana promenljiva sa imenom verify na liniji 34
ERROR 23:05:40,957 - SEMANTICKA GRESKA: noObj ne predstavlja funkciju na liniji 34
ERROR 23:05:40,957 - SEMANTICKA GRESKA: Tip izraza u uslovu if, while ili foreach petlje treba biti tipa bool, a nije na liniji 34
INFO  23:05:40,957 - Pristup elemntu niza niz na liniji 34
ERROR 23:05:40,957 - SEMANTICKA GRESKA: Nije deklarisana promenljiva sa imenom ord na liniji 34
ERROR 23:05:40,957 - SEMANTICKA GRESKA: noObj ne predstavlja funkciju na liniji 34
INFO  23:05:40,957 - 0  na liniji 34
ERROR 23:05:40,957 - SEMANTICKA GRESKA: Formalni parametar funkcije sum koji je tipa int nije kompatibilan sa stvarnim argumentom koji je tipa char na liniji 34
INFO  23:05:40,957 - Prepoznata naredba print
ERROR 23:05:40,957 - SEMANTICKA GRESKA: Expr na liniji 34 nije tipa int, char ili bool na liniji 34
ERROR 23:05:40,957 - SEMANTICKA GRESKA: Nije deklarisana promenljiva sa imenom ord na liniji 35
ERROR 23:05:40,958 - SEMANTICKA GRESKA: noObj ne predstavlja funkciju na liniji 35
INFO  23:05:40,958 - 0  na liniji 35
ERROR 23:05:40,958 - SEMANTICKA GRESKA: Formalni parametar funkcije sum koji je tipa int nije kompatibilan sa stvarnim argumentom koji je tipa char na liniji 35
INFO  23:05:40,958 - Prepoznata naredba print
ERROR 23:05:40,958 - SEMANTICKA GRESKA: Expr na liniji 35 nije tipa int, char ili bool na liniji 35
INFO  23:05:40,958 - Print count calls = 3
INFO  23:05:40,958 - ====================================
ERROR 23:05:40,958 - Parsiranje NIJE uspesno zavrseno!
