INFO  02:54:26,770 - Compiling source file: C:\Users\el190235d\Desktop\PP1\projekat\pp1lab.templateAST\pp1lab.templateAST\workspace\MJCompiler\test\program_mjDokumentija_pr1.mj
INFO  02:54:26,776 - #1 program
INFO  02:54:26,776 - #46 p
INFO  02:54:26,776 - #7 const
INFO  02:54:26,776 - #46 int
INFO  02:54:26,776 - #46 size
INFO  02:54:26,776 - #32 =
INFO  02:54:26,776 - #47 10
INFO  02:54:26,776 - #35 ;
INFO  02:54:26,776 - #4 class
INFO  02:54:26,777 - #46 Table
INFO  02:54:26,777 - #43 {
INFO  02:54:26,777 - #46 int
INFO  02:54:26,777 - #46 pos
INFO  02:54:26,777 - #41 [
INFO  02:54:26,777 - #42 ]
INFO  02:54:26,777 - #37 ,
INFO  02:54:26,777 - #46 neg
INFO  02:54:26,777 - #41 [
INFO  02:54:26,777 - #42 ]
INFO  02:54:26,778 - #37 ,
INFO  02:54:26,778 - #46 factor
INFO  02:54:26,778 - #35 ;
INFO  02:54:26,778 - #43 {
INFO  02:54:26,778 - #46 Table
INFO  02:54:26,778 - #39 (
INFO  02:54:26,778 - #46 int
INFO  02:54:26,778 - #46 factor
INFO  02:54:26,778 - #40 )
INFO  02:54:26,779 - #43 {
INFO  02:54:26,779 - #46 this
INFO  02:54:26,779 - #38 .
INFO  02:54:26,779 - #46 factor
INFO  02:54:26,779 - #32 =
INFO  02:54:26,779 - #46 factor
INFO  02:54:26,779 - #35 ;
INFO  02:54:26,779 - #44 }
INFO  02:54:26,779 - #13 void
INFO  02:54:26,779 - #46 putp
INFO  02:54:26,779 - #39 (
INFO  02:54:26,779 - #46 int
INFO  02:54:26,780 - #46 a
INFO  02:54:26,780 - #37 ,
INFO  02:54:26,780 - #46 int
INFO  02:54:26,780 - #46 idx
INFO  02:54:26,780 - #40 )
INFO  02:54:26,780 - #43 {
INFO  02:54:26,780 - #46 this
INFO  02:54:26,780 - #38 .
INFO  02:54:26,780 - #46 pos
INFO  02:54:26,780 - #41 [
INFO  02:54:26,780 - #46 idx
INFO  02:54:26,780 - #42 ]
INFO  02:54:26,780 - #32 =
INFO  02:54:26,781 - #46 a
INFO  02:54:26,781 - #35 ;
INFO  02:54:26,781 - #44 }
INFO  02:54:26,781 - #13 void
INFO  02:54:26,781 - #46 putn
INFO  02:54:26,781 - #39 (
INFO  02:54:26,781 - #46 int
INFO  02:54:26,781 - #46 a
INFO  02:54:26,781 - #37 ,
INFO  02:54:26,781 - #46 int
INFO  02:54:26,781 - #46 idx
INFO  02:54:26,781 - #40 )
INFO  02:54:26,781 - #43 {
INFO  02:54:26,781 - #46 this
INFO  02:54:26,782 - #38 .
INFO  02:54:26,782 - #46 neg
INFO  02:54:26,782 - #41 [
INFO  02:54:26,782 - #46 idx
INFO  02:54:26,782 - #42 ]
INFO  02:54:26,782 - #32 =
INFO  02:54:26,782 - #46 a
INFO  02:54:26,782 - #35 ;
INFO  02:54:26,782 - #44 }
INFO  02:54:26,782 - #46 int
INFO  02:54:26,782 - #46 getp
INFO  02:54:26,782 - #39 (
INFO  02:54:26,782 - #46 int
INFO  02:54:26,782 - #46 idx
INFO  02:54:26,783 - #40 )
INFO  02:54:26,783 - #43 {
INFO  02:54:26,783 - #3 return
INFO  02:54:26,783 - #46 pos
INFO  02:54:26,783 - #41 [
INFO  02:54:26,783 - #46 idx
INFO  02:54:26,783 - #42 ]
INFO  02:54:26,783 - #35 ;
INFO  02:54:26,783 - #44 }
INFO  02:54:26,783 - #46 int
INFO  02:54:26,783 - #46 getn
INFO  02:54:26,783 - #39 (
INFO  02:54:26,783 - #46 int
INFO  02:54:26,783 - #46 idx
INFO  02:54:26,783 - #40 )
INFO  02:54:26,783 - #43 {
INFO  02:54:26,783 - #3 return
INFO  02:54:26,783 - #46 neg
INFO  02:54:26,784 - #41 [
INFO  02:54:26,784 - #46 idx
INFO  02:54:26,784 - #42 ]
INFO  02:54:26,784 - #35 ;
INFO  02:54:26,784 - #44 }
INFO  02:54:26,784 - #44 }
INFO  02:54:26,784 - #44 }
INFO  02:54:26,784 - #46 Table
INFO  02:54:26,784 - #46 val
INFO  02:54:26,784 - #35 ;
INFO  02:54:26,784 - #46 Int
INFO  02:54:26,784 - #46 rows
INFO  02:54:26,784 - #37 ,
INFO  02:54:26,784 - #46 columns
INFO  02:54:26,784 - #35 ;
INFO  02:54:26,784 - #43 {
INFO  02:54:26,784 - #13 void
INFO  02:54:26,784 - #46 f
INFO  02:54:26,784 - #39 (
INFO  02:54:26,784 - #46 char
INFO  02:54:26,785 - #46 ch
INFO  02:54:26,785 - #37 ,
INFO  02:54:26,785 - #46 int
INFO  02:54:26,785 - #46 a
INFO  02:54:26,785 - #37 ,
INFO  02:54:26,785 - #46 int
INFO  02:54:26,785 - #46 arg
INFO  02:54:26,785 - #40 )
INFO  02:54:26,785 - #46 int
INFO  02:54:26,785 - #46 x
INFO  02:54:26,785 - #35 ;
INFO  02:54:26,785 - #43 {
INFO  02:54:26,785 - #46 x
INFO  02:54:26,785 - #32 =
INFO  02:54:26,785 - #46 arg
INFO  02:54:26,785 - #35 ;
INFO  02:54:26,785 - #44 }
INFO  02:54:26,786 - #13 void
INFO  02:54:26,786 - #46 main
INFO  02:54:26,786 - #39 (
INFO  02:54:26,786 - #40 )
INFO  02:54:26,786 - #46 int
INFO  02:54:26,786 - #46 x
INFO  02:54:26,786 - #37 ,
INFO  02:54:26,786 - #46 i
INFO  02:54:26,786 - #35 ;
INFO  02:54:26,786 - #46 char
INFO  02:54:26,786 - #46 c
INFO  02:54:26,786 - #37 ,
INFO  02:54:26,786 - #46 int
INFO  02:54:26,786 - #41 [
INFO  02:54:26,786 - #42 ]
INFO  02:54:26,786 - #46 arr
INFO  02:54:26,786 - #35 ;
INFO  02:54:26,786 - #43 {
INFO  02:54:26,786 - #46 val
INFO  02:54:26,787 - #32 =
INFO  02:54:26,787 - #11 new
INFO  02:54:26,787 - #46 Table
INFO  02:54:26,787 - #39 (
INFO  02:54:26,787 - #47 2
INFO  02:54:26,787 - #40 )
INFO  02:54:26,787 - #35 ;
INFO  02:54:26,787 - #46 arr
INFO  02:54:26,787 - #32 =
INFO  02:54:26,787 - #11 new
INFO  02:54:26,787 - #46 int
INFO  02:54:26,787 - #41 [
INFO  02:54:26,787 - #47 3
INFO  02:54:26,788 - #42 ]
INFO  02:54:26,788 - #35 ;
INFO  02:54:26,788 - #46 i
INFO  02:54:26,788 - #32 =
INFO  02:54:26,788 - #47 0
INFO  02:54:26,788 - #35 ;
INFO  02:54:26,788 - #10 while
INFO  02:54:26,788 - #39 (
INFO  02:54:26,788 - #46 i
INFO  02:54:26,788 - #28 <
INFO  02:54:26,788 - #47 3
INFO  02:54:26,788 - #40 )
INFO  02:54:26,789 - #43 {
INFO  02:54:26,789 - #46 arr
INFO  02:54:26,789 - #41 [
INFO  02:54:26,789 - #46 i
INFO  02:54:26,789 - #42 ]
INFO  02:54:26,789 - #32 =
INFO  02:54:26,789 - #46 i
INFO  02:54:26,789 - #35 ;
INFO  02:54:26,789 - #46 i
INFO  02:54:26,789 - #33 ++
INFO  02:54:26,789 - #35 ;
INFO  02:54:26,789 - #44 }
INFO  02:54:26,789 - #46 arr
INFO  02:54:26,790 - #38 .
INFO  02:54:26,790 - #46 foreach
INFO  02:54:26,790 - #39 (
INFO  02:54:26,790 - #46 x
INFO  02:54:26,790 - #45 =>
INFO  02:54:26,790 - #2 print
INFO  02:54:26,790 - #39 (
INFO  02:54:26,790 - #46 x
INFO  02:54:26,790 - #40 )
INFO  02:54:26,790 - #35 ;
INFO  02:54:26,790 - #40 )
INFO  02:54:26,790 - #35 ;
INFO  02:54:26,790 - #46 val
INFO  02:54:26,790 - #38 .
INFO  02:54:26,790 - #46 pos
INFO  02:54:26,790 - #32 =
INFO  02:54:26,790 - #11 new
INFO  02:54:26,790 - #46 int
INFO  02:54:26,790 - #41 [
INFO  02:54:26,790 - #46 size
INFO  02:54:26,790 - #42 ]
INFO  02:54:26,790 - #35 ;
INFO  02:54:26,790 - #46 val
INFO  02:54:26,790 - #38 .
INFO  02:54:26,791 - #46 neg
INFO  02:54:26,791 - #32 =
INFO  02:54:26,791 - #11 new
INFO  02:54:26,791 - #46 int
INFO  02:54:26,791 - #41 [
INFO  02:54:26,791 - #46 size
INFO  02:54:26,791 - #42 ]
INFO  02:54:26,791 - #35 ;
INFO  02:54:26,791 - #12 read
INFO  02:54:26,791 - #39 (
INFO  02:54:26,791 - #46 x
INFO  02:54:26,791 - #40 )
INFO  02:54:26,791 - #35 ;
INFO  02:54:26,791 - #41 [
INFO  02:54:26,791 - #46 i
INFO  02:54:26,791 - #37 ,
INFO  02:54:26,791 - #37 ,
INFO  02:54:26,791 - #46 x
INFO  02:54:26,791 - #42 ]
INFO  02:54:26,792 - #32 =
INFO  02:54:26,792 - #46 arr
INFO  02:54:26,792 - #35 ;
INFO  02:54:26,792 - #10 while
INFO  02:54:26,792 - #39 (
INFO  02:54:26,792 - #46 i
INFO  02:54:26,792 - #28 <
INFO  02:54:26,792 - #46 size
INFO  02:54:26,792 - #40 )
INFO  02:54:26,792 - #43 {
INFO  02:54:26,792 - #46 val
INFO  02:54:26,792 - #38 .
INFO  02:54:26,792 - #46 putp
INFO  02:54:26,792 - #39 (
INFO  02:54:26,792 - #47 0
INFO  02:54:26,792 - #37 ,
INFO  02:54:26,792 - #46 i
INFO  02:54:26,792 - #40 )
INFO  02:54:26,793 - #35 ;
INFO  02:54:26,793 - #46 val
INFO  02:54:26,793 - #38 .
INFO  02:54:26,793 - #46 putn
INFO  02:54:26,793 - #39 (
INFO  02:54:26,793 - #47 0
INFO  02:54:26,793 - #37 ,
INFO  02:54:26,793 - #46 i
INFO  02:54:26,793 - #40 )
INFO  02:54:26,793 - #35 ;
INFO  02:54:26,793 - #46 i
INFO  02:54:26,793 - #33 ++
INFO  02:54:26,793 - #35 ;
INFO  02:54:26,794 - #44 }
INFO  02:54:26,794 - #46 f
INFO  02:54:26,794 - #39 (
INFO  02:54:26,794 - #46 c
INFO  02:54:26,794 - #37 ,
INFO  02:54:26,794 - #46 x
INFO  02:54:26,794 - #37 ,
INFO  02:54:26,794 - #46 i
INFO  02:54:26,794 - #40 )
INFO  02:54:26,794 - #35 ;
INFO  02:54:26,794 - #12 read
INFO  02:54:26,794 - #39 (
INFO  02:54:26,794 - #46 rows
INFO  02:54:26,795 - #40 )
INFO  02:54:26,795 - #35 ;
INFO  02:54:26,795 - #46 x
INFO  02:54:26,795 - #32 =
INFO  02:54:26,795 - #46 rows
INFO  02:54:26,795 - #35 ;
INFO  02:54:26,795 - #10 while
INFO  02:54:26,795 - #39 (
INFO  02:54:26,795 - #48 true
INFO  02:54:26,795 - #40 )
INFO  02:54:26,795 - #43 {
INFO  02:54:26,795 - #8 if
INFO  02:54:26,795 - #39 (
INFO  02:54:26,795 - #46 x
INFO  02:54:26,795 - #29 <=
INFO  02:54:26,796 - #47 0
INFO  02:54:26,796 - #40 )
INFO  02:54:26,796 - #18 break
INFO  02:54:26,796 - #35 ;
INFO  02:54:26,796 - #8 if
INFO  02:54:26,796 - #39 (
INFO  02:54:26,796 - #47 0
INFO  02:54:26,796 - #29 <=
INFO  02:54:26,796 - #46 x
INFO  02:54:26,796 - #30 &&
INFO  02:54:26,796 - #46 x
INFO  02:54:26,796 - #28 <
INFO  02:54:26,796 - #46 size
INFO  02:54:26,796 - #40 )
INFO  02:54:26,796 - #43 {
INFO  02:54:26,797 - #46 val
INFO  02:54:26,797 - #38 .
INFO  02:54:26,797 - #46 putp
INFO  02:54:26,797 - #39 (
INFO  02:54:26,797 - #46 val
INFO  02:54:26,797 - #38 .
INFO  02:54:26,797 - #46 getp
INFO  02:54:26,797 - #39 (
INFO  02:54:26,797 - #46 x
INFO  02:54:26,797 - #40 )
INFO  02:54:26,797 - #19 +
INFO  02:54:26,797 - #47 1
INFO  02:54:26,797 - #40 )
INFO  02:54:26,797 - #35 ;
INFO  02:54:26,797 - #44 }
INFO  02:54:26,798 - #6 else
INFO  02:54:26,798 - #8 if
INFO  02:54:26,798 - #39 (
INFO  02:54:26,798 - #20 -
INFO  02:54:26,798 - #46 size
INFO  02:54:26,798 - #28 <
INFO  02:54:26,798 - #46 x
INFO  02:54:26,798 - #30 &&
INFO  02:54:26,798 - #46 x
INFO  02:54:26,798 - #28 <
INFO  02:54:26,798 - #47 0
INFO  02:54:26,798 - #40 )
INFO  02:54:26,798 - #43 {
INFO  02:54:26,798 - #46 val
INFO  02:54:26,798 - #38 .
INFO  02:54:26,798 - #46 putn
INFO  02:54:26,798 - #39 (
INFO  02:54:26,798 - #46 val
INFO  02:54:26,798 - #38 .
INFO  02:54:26,798 - #46 getn
INFO  02:54:26,798 - #39 (
INFO  02:54:26,798 - #46 x
INFO  02:54:26,799 - #40 )
INFO  02:54:26,799 - #19 +
INFO  02:54:26,799 - #47 1
INFO  02:54:26,799 - #40 )
INFO  02:54:26,799 - #35 ;
INFO  02:54:26,799 - #44 }
INFO  02:54:26,799 - #12 read
INFO  02:54:26,799 - #39 (
INFO  02:54:26,799 - #46 x
INFO  02:54:26,799 - #40 )
INFO  02:54:26,799 - #35 ;
INFO  02:54:26,799 - #44 }
INFO  02:54:26,799 - #44 }
INFO  02:54:26,799 - #44 }
