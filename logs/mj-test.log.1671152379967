INFO  01:57:17,007 - Compiling source file: C:\Users\el190235d\Desktop\PP1\projekat\pp1lab.templateAST\pp1lab.templateAST\workspace\MJCompiler\test\pr1.mj
INFO  01:57:17,010 - #2 program
INFO  01:57:17,011 - #48 p
INFO  01:57:17,011 - #8 const
INFO  01:57:17,011 - #48 int
INFO  01:57:17,011 - #48 size
INFO  01:57:17,011 - #33 =
INFO  01:57:17,011 - #47 10
INFO  01:57:17,011 - #36 ;
INFO  01:57:17,011 - #5 class
INFO  01:57:17,012 - #48 Table
INFO  01:57:17,012 - #44 {
INFO  01:57:17,012 - #48 int
INFO  01:57:17,012 - #48 pos
INFO  01:57:17,012 - #42 [
INFO  01:57:17,012 - #43 ]
INFO  01:57:17,012 - #38 ,
INFO  01:57:17,012 - #48 neg
INFO  01:57:17,012 - #42 [
INFO  01:57:17,012 - #43 ]
INFO  01:57:17,012 - #38 ,
INFO  01:57:17,012 - #48 factor
INFO  01:57:17,012 - #36 ;
INFO  01:57:17,013 - #44 {
INFO  01:57:17,013 - #48 Table
INFO  01:57:17,013 - #40 (
INFO  01:57:17,013 - #48 int
INFO  01:57:17,013 - #48 factor
INFO  01:57:17,013 - #41 )
INFO  01:57:17,013 - #44 {
INFO  01:57:17,013 - #17 this
INFO  01:57:17,013 - #39 .
INFO  01:57:17,013 - #48 factor
INFO  01:57:17,013 - #33 =
INFO  01:57:17,013 - #48 factor
INFO  01:57:17,013 - #36 ;
INFO  01:57:17,013 - #45 }
INFO  01:57:17,013 - #14 void
INFO  01:57:17,013 - #48 putp
INFO  01:57:17,013 - #40 (
INFO  01:57:17,014 - #48 int
INFO  01:57:17,014 - #48 a
INFO  01:57:17,014 - #38 ,
INFO  01:57:17,014 - #48 int
INFO  01:57:17,014 - #48 idx
INFO  01:57:17,014 - #41 )
INFO  01:57:17,014 - #44 {
INFO  01:57:17,014 - #17 this
INFO  01:57:17,014 - #39 .
INFO  01:57:17,014 - #48 pos
INFO  01:57:17,014 - #42 [
INFO  01:57:17,014 - #48 idx
INFO  01:57:17,014 - #43 ]
INFO  01:57:17,014 - #33 =
INFO  01:57:17,014 - #48 a
INFO  01:57:17,014 - #36 ;
INFO  01:57:17,014 - #45 }
INFO  01:57:17,014 - #14 void
INFO  01:57:17,014 - #48 putn
INFO  01:57:17,014 - #40 (
INFO  01:57:17,014 - #48 int
INFO  01:57:17,015 - #48 a
INFO  01:57:17,015 - #38 ,
INFO  01:57:17,015 - #48 int
INFO  01:57:17,015 - #48 idx
INFO  01:57:17,015 - #41 )
INFO  01:57:17,015 - #44 {
INFO  01:57:17,015 - #17 this
INFO  01:57:17,015 - #39 .
INFO  01:57:17,015 - #48 neg
INFO  01:57:17,015 - #42 [
INFO  01:57:17,015 - #48 idx
INFO  01:57:17,015 - #43 ]
INFO  01:57:17,015 - #33 =
INFO  01:57:17,015 - #48 a
INFO  01:57:17,015 - #36 ;
INFO  01:57:17,015 - #45 }
INFO  01:57:17,015 - #48 int
INFO  01:57:17,015 - #48 getp
INFO  01:57:17,016 - #40 (
INFO  01:57:17,016 - #48 int
INFO  01:57:17,016 - #48 idx
INFO  01:57:17,016 - #41 )
INFO  01:57:17,016 - #44 {
INFO  01:57:17,016 - #4 return
INFO  01:57:17,016 - #48 pos
INFO  01:57:17,016 - #42 [
INFO  01:57:17,016 - #48 idx
INFO  01:57:17,016 - #43 ]
INFO  01:57:17,016 - #36 ;
INFO  01:57:17,016 - #45 }
INFO  01:57:17,016 - #48 int
INFO  01:57:17,016 - #48 getn
INFO  01:57:17,016 - #40 (
INFO  01:57:17,016 - #48 int
INFO  01:57:17,016 - #48 idx
INFO  01:57:17,016 - #41 )
INFO  01:57:17,016 - #44 {
INFO  01:57:17,017 - #4 return
INFO  01:57:17,017 - #48 neg
INFO  01:57:17,017 - #42 [
INFO  01:57:17,017 - #48 idx
INFO  01:57:17,017 - #43 ]
INFO  01:57:17,017 - #36 ;
INFO  01:57:17,017 - #45 }
INFO  01:57:17,017 - #45 }
INFO  01:57:17,017 - #45 }
INFO  01:57:17,017 - #48 Table
INFO  01:57:17,017 - #48 val
INFO  01:57:17,017 - #36 ;
INFO  01:57:17,017 - #48 Int
INFO  01:57:17,017 - #48 rows
INFO  01:57:17,017 - #38 ,
INFO  01:57:17,017 - #48 columns
INFO  01:57:17,017 - #36 ;
INFO  01:57:17,017 - #44 {
INFO  01:57:17,017 - #14 void
INFO  01:57:17,017 - #48 f
INFO  01:57:17,018 - #40 (
INFO  01:57:17,018 - #48 char
INFO  01:57:17,018 - #48 ch
INFO  01:57:17,018 - #38 ,
INFO  01:57:17,018 - #48 int
INFO  01:57:17,018 - #48 a
INFO  01:57:17,018 - #38 ,
INFO  01:57:17,018 - #48 int
INFO  01:57:17,018 - #48 arg
INFO  01:57:17,018 - #41 )
INFO  01:57:17,018 - #48 int
INFO  01:57:17,019 - #48 x
INFO  01:57:17,019 - #36 ;
INFO  01:57:17,019 - #44 {
INFO  01:57:17,019 - #48 x
INFO  01:57:17,019 - #33 =
INFO  01:57:17,019 - #48 arg
INFO  01:57:17,019 - #36 ;
INFO  01:57:17,019 - #45 }
INFO  01:57:17,019 - #14 void
INFO  01:57:17,019 - #48 main
INFO  01:57:17,019 - #40 (
INFO  01:57:17,019 - #41 )
INFO  01:57:17,020 - #48 int
INFO  01:57:17,020 - #48 x
INFO  01:57:17,020 - #38 ,
INFO  01:57:17,020 - #48 i
INFO  01:57:17,020 - #36 ;
INFO  01:57:17,020 - #48 char
INFO  01:57:17,020 - #48 c
INFO  01:57:17,020 - #38 ,
INFO  01:57:17,020 - #48 int
INFO  01:57:17,020 - #42 [
INFO  01:57:17,020 - #43 ]
INFO  01:57:17,020 - #48 arr
INFO  01:57:17,020 - #36 ;
INFO  01:57:17,020 - #44 {
INFO  01:57:17,020 - #48 val
INFO  01:57:17,020 - #33 =
INFO  01:57:17,020 - #12 new
INFO  01:57:17,021 - #48 Table
INFO  01:57:17,021 - #40 (
INFO  01:57:17,021 - #47 2
INFO  01:57:17,021 - #41 )
INFO  01:57:17,021 - #36 ;
INFO  01:57:17,021 - #48 arr
INFO  01:57:17,021 - #33 =
INFO  01:57:17,021 - #12 new
INFO  01:57:17,021 - #48 int
INFO  01:57:17,021 - #42 [
INFO  01:57:17,021 - #47 3
INFO  01:57:17,022 - #43 ]
INFO  01:57:17,022 - #36 ;
INFO  01:57:17,022 - #48 i
INFO  01:57:17,022 - #33 =
INFO  01:57:17,022 - #47 0
INFO  01:57:17,022 - #36 ;
INFO  01:57:17,022 - #11 while
INFO  01:57:17,022 - #40 (
INFO  01:57:17,022 - #48 i
INFO  01:57:17,022 - #29 <
INFO  01:57:17,023 - #47 3
INFO  01:57:17,023 - #41 )
INFO  01:57:17,023 - #44 {
INFO  01:57:17,023 - #48 arr
INFO  01:57:17,023 - #42 [
INFO  01:57:17,023 - #48 i
INFO  01:57:17,023 - #43 ]
INFO  01:57:17,023 - #33 =
INFO  01:57:17,023 - #48 i
INFO  01:57:17,023 - #36 ;
INFO  01:57:17,023 - #48 i
INFO  01:57:17,023 - #34 ++
INFO  01:57:17,023 - #36 ;
INFO  01:57:17,024 - #45 }
INFO  01:57:17,024 - #48 arr
INFO  01:57:17,024 - #39 .
INFO  01:57:17,024 - #18 foreach
INFO  01:57:17,024 - #40 (
INFO  01:57:17,024 - #48 x
INFO  01:57:17,024 - #46 =>
INFO  01:57:17,024 - #3 print
INFO  01:57:17,024 - #40 (
INFO  01:57:17,024 - #48 x
INFO  01:57:17,024 - #41 )
INFO  01:57:17,024 - #36 ;
INFO  01:57:17,024 - #41 )
INFO  01:57:17,024 - #36 ;
INFO  01:57:17,025 - #48 val
INFO  01:57:17,025 - #39 .
INFO  01:57:17,025 - #48 pos
INFO  01:57:17,025 - #33 =
INFO  01:57:17,025 - #12 new
INFO  01:57:17,025 - #48 int
INFO  01:57:17,025 - #42 [
INFO  01:57:17,025 - #48 size
INFO  01:57:17,025 - #43 ]
INFO  01:57:17,025 - #36 ;
INFO  01:57:17,025 - #48 val
INFO  01:57:17,025 - #39 .
INFO  01:57:17,025 - #48 neg
INFO  01:57:17,025 - #33 =
INFO  01:57:17,025 - #12 new
INFO  01:57:17,025 - #48 int
INFO  01:57:17,025 - #42 [
INFO  01:57:17,025 - #48 size
INFO  01:57:17,025 - #43 ]
INFO  01:57:17,025 - #36 ;
INFO  01:57:17,025 - #13 read
INFO  01:57:17,025 - #40 (
INFO  01:57:17,025 - #48 x
INFO  01:57:17,026 - #41 )
INFO  01:57:17,026 - #36 ;
INFO  01:57:17,026 - #42 [
INFO  01:57:17,026 - #48 i
INFO  01:57:17,026 - #38 ,
INFO  01:57:17,026 - #38 ,
INFO  01:57:17,026 - #48 x
INFO  01:57:17,026 - #43 ]
INFO  01:57:17,026 - #33 =
INFO  01:57:17,026 - #48 arr
INFO  01:57:17,026 - #36 ;
INFO  01:57:17,026 - #11 while
INFO  01:57:17,026 - #40 (
INFO  01:57:17,026 - #48 i
INFO  01:57:17,026 - #29 <
INFO  01:57:17,026 - #48 size
INFO  01:57:17,026 - #41 )
INFO  01:57:17,026 - #44 {
INFO  01:57:17,026 - #48 val
INFO  01:57:17,026 - #39 .
INFO  01:57:17,026 - #48 putp
INFO  01:57:17,027 - #40 (
INFO  01:57:17,027 - #47 0
INFO  01:57:17,027 - #38 ,
INFO  01:57:17,027 - #48 i
INFO  01:57:17,027 - #41 )
INFO  01:57:17,027 - #36 ;
INFO  01:57:17,027 - #48 val
INFO  01:57:17,027 - #39 .
INFO  01:57:17,027 - #48 putn
INFO  01:57:17,027 - #40 (
INFO  01:57:17,027 - #47 0
INFO  01:57:17,027 - #38 ,
INFO  01:57:17,027 - #48 i
INFO  01:57:17,027 - #41 )
INFO  01:57:17,027 - #36 ;
INFO  01:57:17,027 - #48 i
INFO  01:57:17,027 - #34 ++
INFO  01:57:17,028 - #36 ;
INFO  01:57:17,028 - #45 }
INFO  01:57:17,028 - #48 f
INFO  01:57:17,028 - #40 (
INFO  01:57:17,028 - #48 c
INFO  01:57:17,028 - #38 ,
INFO  01:57:17,028 - #48 x
INFO  01:57:17,028 - #38 ,
INFO  01:57:17,028 - #48 i
INFO  01:57:17,028 - #41 )
INFO  01:57:17,028 - #36 ;
INFO  01:57:17,028 - #13 read
INFO  01:57:17,028 - #40 (
INFO  01:57:17,028 - #48 rows
INFO  01:57:17,028 - #41 )
INFO  01:57:17,029 - #36 ;
INFO  01:57:17,029 - #48 x
INFO  01:57:17,029 - #33 =
INFO  01:57:17,029 - #48 rows
INFO  01:57:17,029 - #36 ;
INFO  01:57:17,029 - #11 while
INFO  01:57:17,029 - #40 (
INFO  01:57:17,029 - #50 true
INFO  01:57:17,029 - #41 )
INFO  01:57:17,029 - #44 {
INFO  01:57:17,029 - #9 if
INFO  01:57:17,029 - #40 (
INFO  01:57:17,029 - #48 x
INFO  01:57:17,029 - #30 <=
INFO  01:57:17,029 - #47 0
INFO  01:57:17,029 - #41 )
INFO  01:57:17,029 - #19 break
INFO  01:57:17,030 - #36 ;
INFO  01:57:17,030 - #9 if
INFO  01:57:17,030 - #40 (
INFO  01:57:17,030 - #47 0
INFO  01:57:17,030 - #30 <=
INFO  01:57:17,030 - #48 x
INFO  01:57:17,030 - #31 &&
INFO  01:57:17,030 - #48 x
INFO  01:57:17,030 - #29 <
INFO  01:57:17,030 - #48 size
INFO  01:57:17,030 - #41 )
INFO  01:57:17,030 - #44 {
INFO  01:57:17,030 - #48 val
INFO  01:57:17,030 - #39 .
INFO  01:57:17,030 - #48 putp
INFO  01:57:17,030 - #40 (
INFO  01:57:17,030 - #48 val
INFO  01:57:17,030 - #39 .
INFO  01:57:17,030 - #48 getp
INFO  01:57:17,030 - #40 (
INFO  01:57:17,030 - #48 x
INFO  01:57:17,030 - #41 )
INFO  01:57:17,030 - #20 +
INFO  01:57:17,030 - #47 1
INFO  01:57:17,030 - #41 )
INFO  01:57:17,030 - #36 ;
INFO  01:57:17,030 - #45 }
INFO  01:57:17,030 - #7 else
INFO  01:57:17,030 - #9 if
INFO  01:57:17,031 - #40 (
INFO  01:57:17,031 - #21 -
INFO  01:57:17,031 - #48 size
INFO  01:57:17,031 - #29 <
INFO  01:57:17,031 - #48 x
INFO  01:57:17,031 - #31 &&
INFO  01:57:17,031 - #48 x
INFO  01:57:17,031 - #29 <
INFO  01:57:17,031 - #47 0
INFO  01:57:17,031 - #41 )
INFO  01:57:17,031 - #44 {
INFO  01:57:17,031 - #48 val
INFO  01:57:17,031 - #39 .
INFO  01:57:17,031 - #48 putn
INFO  01:57:17,031 - #40 (
INFO  01:57:17,031 - #48 val
INFO  01:57:17,031 - #39 .
INFO  01:57:17,031 - #48 getn
INFO  01:57:17,031 - #40 (
INFO  01:57:17,031 - #21 -
INFO  01:57:17,031 - #48 x
INFO  01:57:17,031 - #41 )
INFO  01:57:17,031 - #20 +
INFO  01:57:17,031 - #47 1
INFO  01:57:17,031 - #41 )
INFO  01:57:17,031 - #36 ;
INFO  01:57:17,032 - #45 }
INFO  01:57:17,032 - #13 read
INFO  01:57:17,032 - #40 (
INFO  01:57:17,032 - #48 x
INFO  01:57:17,032 - #41 )
INFO  01:57:17,032 - #36 ;
INFO  01:57:17,032 - #45 }
INFO  01:57:17,032 - #45 }
INFO  01:57:17,032 - #45 }
