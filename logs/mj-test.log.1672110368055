INFO  04:05:32,005 - Compiling source file: C:\Users\el190235d\Desktop\PP1\projekat\pp1lab.templateAST\pp1lab.templateAST\workspace\MJCompiler\test\test302.mj
INFO  04:05:32,051 - #2 program
INFO  04:05:32,051 - #47 test302
INFO  04:05:32,051 - #8 const
INFO  04:05:32,052 - #47 int
INFO  04:05:32,052 - #47 jedan
INFO  04:05:32,053 - #32 =
INFO  04:05:32,053 - #46 1
INFO  04:05:32,053 - #35 ;
INFO  04:05:32,053 - #47 int
INFO  04:05:32,053 - #47 i
INFO  04:05:32,054 - #35 ;
INFO  04:05:32,054 - #47 bool
INFO  04:05:32,055 - #47 ibool
INFO  04:05:32,055 - #35 ;
INFO  04:05:32,055 - #47 int
INFO  04:05:32,055 - #47 niz2
INFO  04:05:32,055 - #35 ;
INFO  04:05:32,055 - #47 int
INFO  04:05:32,055 - #47 niz
INFO  04:05:32,057 - #41 [
INFO  04:05:32,057 - #42 ]
INFO  04:05:32,057 - #35 ;
INFO  04:05:32,058 - #47 int
INFO  04:05:32,058 - #47 a
INFO  04:05:32,058 - #37 ,
INFO  04:05:32,058 - #47 curr
INFO  04:05:32,058 - #35 ;
INFO  04:05:32,058 - #43 {
INFO  04:05:32,058 - #47 int
INFO  04:05:32,059 - #47 sum
INFO  04:05:32,059 - #39 (
INFO  04:05:32,059 - #47 int
INFO  04:05:32,059 - #47 z
INFO  04:05:32,060 - #37 ,
INFO  04:05:32,060 - #47 int
INFO  04:05:32,060 - #47 d
INFO  04:05:32,060 - #40 )
INFO  04:05:32,060 - #43 {
INFO  04:05:32,061 - #4 return
INFO  04:05:32,061 - #47 z
INFO  04:05:32,061 - #19 +
INFO  04:05:32,062 - #47 d
INFO  04:05:32,062 - #35 ;
INFO  04:05:32,062 - #44 }
INFO  04:05:32,063 - #47 int
INFO  04:05:32,063 - #47 inkrement
INFO  04:05:32,063 - #39 (
INFO  04:05:32,063 - #47 int
INFO  04:05:32,063 - #47 a
INFO  04:05:32,063 - #37 ,
INFO  04:05:32,063 - #47 int
INFO  04:05:32,063 - #47 inc
INFO  04:05:32,063 - #40 )
INFO  04:05:32,063 - #47 int
INFO  04:05:32,063 - #47 pom
INFO  04:05:32,063 - #35 ;
INFO  04:05:32,064 - #43 {
INFO  04:05:32,064 - #9 if
INFO  04:05:32,064 - #39 (
INFO  04:05:32,064 - #47 inc
INFO  04:05:32,064 - #24 ==
INFO  04:05:32,064 - #47 jedan
INFO  04:05:32,065 - #40 )
INFO  04:05:32,066 - #47 pom
INFO  04:05:32,066 - #32 =
INFO  04:05:32,066 - #46 1
INFO  04:05:32,066 - #35 ;
INFO  04:05:32,066 - #7 else
INFO  04:05:32,067 - #9 if
INFO  04:05:32,067 - #39 (
INFO  04:05:32,067 - #47 inc
INFO  04:05:32,067 - #24 ==
INFO  04:05:32,067 - #46 2
INFO  04:05:32,067 - #40 )
INFO  04:05:32,067 - #47 pom
INFO  04:05:32,067 - #32 =
INFO  04:05:32,067 - #47 a
INFO  04:05:32,067 - #35 ;
INFO  04:05:32,067 - #4 return
INFO  04:05:32,067 - #47 sum
INFO  04:05:32,067 - #39 (
INFO  04:05:32,067 - #47 a
INFO  04:05:32,067 - #37 ,
INFO  04:05:32,068 - #47 pom
INFO  04:05:32,068 - #40 )
INFO  04:05:32,068 - #35 ;
INFO  04:05:32,068 - #44 }
INFO  04:05:32,068 - #47 bool
INFO  04:05:32,068 - #47 verify
INFO  04:05:32,068 - #39 (
INFO  04:05:32,068 - #40 )
INFO  04:05:32,068 - #43 {
INFO  04:05:32,069 - #3 print
INFO  04:05:32,069 - #39 (
INFO  04:05:32,069 - #48 v
INFO  04:05:32,069 - #40 )
INFO  04:05:32,069 - #35 ;
INFO  04:05:32,069 - #4 return
INFO  04:05:32,069 - #49 false
INFO  04:05:32,069 - #35 ;
INFO  04:05:32,070 - #44 }
INFO  04:05:32,070 - #14 void
INFO  04:05:32,070 - #47 main
INFO  04:05:32,070 - #39 (
INFO  04:05:32,070 - #40 )
INFO  04:05:32,070 - #43 {
INFO  04:05:32,070 - #44 }
INFO  04:05:32,070 - #44 }
INFO  04:05:32,075 - Program(
  ProgName(
   test302
  ) [ProgName]
  VarDeclarations(
    VarDeclarations(
      VarDeclarations(
        VarDeclarations(
          VarDeclarations(
            ConstDeclarations(
              NoVarDecl(
              ) [NoVarDecl]
              ConstDeclaration(
                Type(
                 int
                ) [Type]
                ConstantValueNumber(
                 jedan
                 1
                ) [ConstantValueNumber]
                EndOfListOfCharDeclarations(
                ) [EndOfListOfCharDeclarations]
              ) [ConstDeclaration]
            ) [ConstDeclarations]
            VarDeclaration(
              Type(
               int
              ) [Type]
              VarDeclarationLast(
                LastVarDeclarations(
                 i
                  VarDeclarationOfNotArray(
                  ) [VarDeclarationOfNotArray]
                ) [LastVarDeclarations]
              ) [VarDeclarationLast]
            ) [VarDeclaration]
          ) [VarDeclarations]
          VarDeclaration(
            Type(
             bool
            ) [Type]
            VarDeclarationLast(
              LastVarDeclarations(
               ibool
                VarDeclarationOfNotArray(
                ) [VarDeclarationOfNotArray]
              ) [LastVarDeclarations]
            ) [VarDeclarationLast]
          ) [VarDeclaration]
        ) [VarDeclarations]
        VarDeclaration(
          Type(
           int
          ) [Type]
          VarDeclarationLast(
            LastVarDeclarations(
             niz2
              VarDeclarationOfNotArray(
              ) [VarDeclarationOfNotArray]
            ) [LastVarDeclarations]
          ) [VarDeclarationLast]
        ) [VarDeclaration]
      ) [VarDeclarations]
      VarDeclaration(
        Type(
         int
        ) [Type]
        VarDeclarationLast(
          LastVarDeclarations(
           niz
            VarDeclarationOfArray(
            ) [VarDeclarationOfArray]
          ) [LastVarDeclarations]
        ) [VarDeclarationLast]
      ) [VarDeclaration]
    ) [VarDeclarations]
    VarDeclaration(
      Type(
       int
      ) [Type]
      VarDeclarationNotLast(
        NotLastVarDeclarations(
         a
          VarDeclarationOfNotArray(
          ) [VarDeclarationOfNotArray]
        ) [NotLastVarDeclarations]
        VarDeclarationLast(
          LastVarDeclarations(
           curr
            VarDeclarationOfNotArray(
            ) [VarDeclarationOfNotArray]
          ) [LastVarDeclarations]
        ) [VarDeclarationLast]
      ) [VarDeclarationNotLast]
    ) [VarDeclaration]
  ) [VarDeclarations]
  MethodDeclarations(
    MethodDeclarations(
      MethodDeclarations(
        MethodDeclarations(
          NoMethodDeclarations(
          ) [NoMethodDeclarations]
          MethodDeclaration(
            ReturnMethodTypeName(
              Type(
               int
              ) [Type]
             sum
            ) [ReturnMethodTypeName]
            FormalParameters(
              ListOfParameters(
                SingleFormalParameter(
                  Type(
                   int
                  ) [Type]
                 z
                  VarDeclarationOfNotArray(
                  ) [VarDeclarationOfNotArray]
                ) [SingleFormalParameter]
                SingleOrEndOfListParameter(
                  SingleFormalParameter(
                    Type(
                     int
                    ) [Type]
                   d
                    VarDeclarationOfNotArray(
                    ) [VarDeclarationOfNotArray]
                  ) [SingleFormalParameter]
                ) [SingleOrEndOfListParameter]
              ) [ListOfParameters]
            ) [FormalParameters]
            MethodWithoutVariables(
            ) [MethodWithoutVariables]
            Statements(
              NoStatements(
              ) [NoStatements]
              StatementReturnExpr(
                AddExpr(
                  TermPositiveExpr(
                    Term(
                      SingleFactor(
                        DesignatorFactor(
                          SimpleDesignator(
                           z
                          ) [SimpleDesignator]
                        ) [DesignatorFactor]
                      ) [SingleFactor]
                    ) [Term]
                  ) [TermPositiveExpr]
                  PlusOperator(
                  ) [PlusOperator]
                  Term(
                    SingleFactor(
                      DesignatorFactor(
                        SimpleDesignator(
                         d
                        ) [SimpleDesignator]
                      ) [DesignatorFactor]
                    ) [SingleFactor]
                  ) [Term]
                ) [AddExpr]
              ) [StatementReturnExpr]
            ) [Statements]
          ) [MethodDeclaration]
        ) [MethodDeclarations]
        MethodDeclaration(
          ReturnMethodTypeName(
            Type(
             int
            ) [Type]
           inkrement
          ) [ReturnMethodTypeName]
          FormalParameters(
            ListOfParameters(
              SingleFormalParameter(
                Type(
                 int
                ) [Type]
               a
                VarDeclarationOfNotArray(
                ) [VarDeclarationOfNotArray]
              ) [SingleFormalParameter]
              SingleOrEndOfListParameter(
                SingleFormalParameter(
                  Type(
                   int
                  ) [Type]
                 inc
                  VarDeclarationOfNotArray(
                  ) [VarDeclarationOfNotArray]
                ) [SingleFormalParameter]
              ) [SingleOrEndOfListParameter]
            ) [ListOfParameters]
          ) [FormalParameters]
          MethodVariables(
            MethodWithoutVariables(
            ) [MethodWithoutVariables]
            VarDeclaration(
              Type(
               int
              ) [Type]
              VarDeclarationLast(
                LastVarDeclarations(
                 pom
                  VarDeclarationOfNotArray(
                  ) [VarDeclarationOfNotArray]
                ) [LastVarDeclarations]
              ) [VarDeclarationLast]
            ) [VarDeclaration]
          ) [MethodVariables]
          Statements(
            Statements(
              NoStatements(
              ) [NoStatements]
              StatementIfElse(
                IfCondition(
                  ConditionsWithoutOr(
                    ConditionsWithoutAnd(
                      RelopCondition(
                        TermPositiveExpr(
                          Term(
                            SingleFactor(
                              DesignatorFactor(
                                SimpleDesignator(
                                 inc
                                ) [SimpleDesignator]
                              ) [DesignatorFactor]
                            ) [SingleFactor]
                          ) [Term]
                        ) [TermPositiveExpr]
                        EqualOperator(
                        ) [EqualOperator]
                        TermPositiveExpr(
                          Term(
                            SingleFactor(
                              DesignatorFactor(
                                SimpleDesignator(
                                 jedan
                                ) [SimpleDesignator]
                              ) [DesignatorFactor]
                            ) [SingleFactor]
                          ) [Term]
                        ) [TermPositiveExpr]
                      ) [RelopCondition]
                    ) [ConditionsWithoutAnd]
                  ) [ConditionsWithoutOr]
                ) [IfCondition]
                StatementDesignator(
                  DesignatorAssignment(
                    SimpleDesignator(
                     pom
                    ) [SimpleDesignator]
                    TermPositiveExpr(
                      Term(
                        SingleFactor(
                          NumberConstFactor(
                           1
                          ) [NumberConstFactor]
                        ) [SingleFactor]
                      ) [Term]
                    ) [TermPositiveExpr]
                  ) [DesignatorAssignment]
                ) [StatementDesignator]
                StatementIf(
                  IfCondition(
                    ConditionsWithoutOr(
                      ConditionsWithoutAnd(
                        RelopCondition(
                          TermPositiveExpr(
                            Term(
                              SingleFactor(
                                DesignatorFactor(
                                  SimpleDesignator(
                                   inc
                                  ) [SimpleDesignator]
                                ) [DesignatorFactor]
                              ) [SingleFactor]
                            ) [Term]
                          ) [TermPositiveExpr]
                          EqualOperator(
                          ) [EqualOperator]
                          TermPositiveExpr(
                            Term(
                              SingleFactor(
                                NumberConstFactor(
                                 2
                                ) [NumberConstFactor]
                              ) [SingleFactor]
                            ) [Term]
                          ) [TermPositiveExpr]
                        ) [RelopCondition]
                      ) [ConditionsWithoutAnd]
                    ) [ConditionsWithoutOr]
                  ) [IfCondition]
                  StatementDesignator(
                    DesignatorAssignment(
                      SimpleDesignator(
                       pom
                      ) [SimpleDesignator]
                      TermPositiveExpr(
                        Term(
                          SingleFactor(
                            DesignatorFactor(
                              SimpleDesignator(
                               a
                              ) [SimpleDesignator]
                            ) [DesignatorFactor]
                          ) [SingleFactor]
                        ) [Term]
                      ) [TermPositiveExpr]
                    ) [DesignatorAssignment]
                  ) [StatementDesignator]
                ) [StatementIf]
              ) [StatementIfElse]
            ) [Statements]
            StatementReturnExpr(
              TermPositiveExpr(
                Term(
                  SingleFactor(
                    FuncCallFactor(
                      FuncCallFactorDesignator(
                        SimpleDesignator(
                         sum
                        ) [SimpleDesignator]
                      ) [FuncCallFactorDesignator]
                      Actuals(
                        ActualParams(
                          ActualParam(
                            TermPositiveExpr(
                              Term(
                                SingleFactor(
                                  DesignatorFactor(
                                    SimpleDesignator(
                                     a
                                    ) [SimpleDesignator]
                                  ) [DesignatorFactor]
                                ) [SingleFactor]
                              ) [Term]
                            ) [TermPositiveExpr]
                          ) [ActualParam]
                          TermPositiveExpr(
                            Term(
                              SingleFactor(
                                DesignatorFactor(
                                  SimpleDesignator(
                                   pom
                                  ) [SimpleDesignator]
                                ) [DesignatorFactor]
                              ) [SingleFactor]
                            ) [Term]
                          ) [TermPositiveExpr]
                        ) [ActualParams]
                      ) [Actuals]
                    ) [FuncCallFactor]
                  ) [SingleFactor]
                ) [Term]
              ) [TermPositiveExpr]
            ) [StatementReturnExpr]
          ) [Statements]
        ) [MethodDeclaration]
      ) [MethodDeclarations]
      MethodDeclaration(
        ReturnMethodTypeName(
          Type(
           bool
          ) [Type]
         verify
        ) [ReturnMethodTypeName]
        NoFormalParameters(
        ) [NoFormalParameters]
        MethodWithoutVariables(
        ) [MethodWithoutVariables]
        Statements(
          Statements(
            NoStatements(
            ) [NoStatements]
            StatementPrintWithoutWidth(
              TermPositiveExpr(
                Term(
                  SingleFactor(
                    CharConstFactor(
                     v
                    ) [CharConstFactor]
                  ) [SingleFactor]
                ) [Term]
              ) [TermPositiveExpr]
            ) [StatementPrintWithoutWidth]
          ) [Statements]
          StatementReturnExpr(
            TermPositiveExpr(
              Term(
                SingleFactor(
                  BooleanConstFactor(
                   false
                  ) [BooleanConstFactor]
                ) [SingleFactor]
              ) [Term]
            ) [TermPositiveExpr]
          ) [StatementReturnExpr]
        ) [Statements]
      ) [MethodDeclaration]
    ) [MethodDeclarations]
    MethodDeclaration(
      VoidMethodTypeName(
       main
      ) [VoidMethodTypeName]
      NoFormalParameters(
      ) [NoFormalParameters]
      MethodWithoutVariables(
      ) [MethodWithoutVariables]
      NoStatements(
      ) [NoStatements]
    ) [MethodDeclaration]
  ) [MethodDeclarations]
) [Program]
INFO  04:05:32,076 - ====================================
INFO  04:05:32,080 - Kreirana je promenjiva i na liniji 7
INFO  04:05:32,080 - Kreirana je promenjiva ibool na liniji 8
INFO  04:05:32,080 - Kreirana je promenjiva niz2 na liniji 10
INFO  04:05:32,080 - Kreirana je promenjiva niz[] na liniji 12
INFO  04:05:32,080 - Kreirana je promenjiva a na liniji 13
INFO  04:05:32,080 - Kreirana je promenjiva curr na liniji 13
INFO  04:05:32,080 - Definicija funkcije sum na liniji 17
INFO  04:05:32,080 - Definicija funkcije inkrement na liniji 23
INFO  04:05:32,080 - Kreirana je promenjiva pom na liniji 24
INFO  04:05:32,080 - FCsum na liniji 29
INFO  04:05:32,081 - Definicija funkcije verify na liniji 32
INFO  04:05:32,081 - Prepoznata naredba print
INFO  04:05:32,081 - Definicija funkcije main na liniji 37
INFO  04:05:32,081 - Print count calls = 1
INFO  04:05:32,081 - ====================================
INFO  04:05:32,082 - Parsiranje uspesno zavrseno!
